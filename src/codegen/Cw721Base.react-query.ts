/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Expiration, Timestamp, Uint64, AllNftInfoResponse, OwnerOfResponse, Approval, NftInfoResponseForNullable_Empty, Empty, ApprovalResponse, ApprovalsResponse, ContractInfoResponse, Cw721ExecuteMsg, Binary, InstantiateMsg, MinterResponse, NftInfoResponse, NumTokensResponse, OperatorsResponse, QueryMsg, TokensResponse } from "./Cw721Base.types";
import { Cw721BaseQueryClient } from "./Cw721Base.client";
export interface Cw721BaseReactQuery<TResponse, TData = TResponse> {
  client: Cw721BaseQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw721BaseMinterQuery<TData> extends Cw721BaseReactQuery<MinterResponse, TData> {}
export function useCw721BaseMinterQuery<TData = MinterResponse>({
  client,
  options
}: Cw721BaseMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(["cw721BaseMinter", client.contractAddress], () => client.minter(), options);
}
export interface Cw721BaseAllTokensQuery<TData> extends Cw721BaseReactQuery<AllTokensResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw721BaseAllTokensQuery<TData = AllTokensResponse>({
  client,
  args,
  options
}: Cw721BaseAllTokensQuery<TData>) {
  return useQuery<AllTokensResponse, Error, TData>(["cw721BaseAllTokens", client.contractAddress, JSON.stringify(args)], () => client.allTokens({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface Cw721BaseTokensQuery<TData> extends Cw721BaseReactQuery<TokensResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useCw721BaseTokensQuery<TData = TokensResponse>({
  client,
  args,
  options
}: Cw721BaseTokensQuery<TData>) {
  return useQuery<TokensResponse, Error, TData>(["cw721BaseTokens", client.contractAddress, JSON.stringify(args)], () => client.tokens({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Cw721BaseAllNftInfoQuery<TData> extends Cw721BaseReactQuery<AllNftInfoResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useCw721BaseAllNftInfoQuery<TData = AllNftInfoResponse>({
  client,
  args,
  options
}: Cw721BaseAllNftInfoQuery<TData>) {
  return useQuery<AllNftInfoResponse, Error, TData>(["cw721BaseAllNftInfo", client.contractAddress, JSON.stringify(args)], () => client.allNftInfo({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Cw721BaseNftInfoQuery<TData> extends Cw721BaseReactQuery<NftInfoResponse, TData> {
  args: {
    tokenId: string;
  };
}
export function useCw721BaseNftInfoQuery<TData = NftInfoResponse>({
  client,
  args,
  options
}: Cw721BaseNftInfoQuery<TData>) {
  return useQuery<NftInfoResponse, Error, TData>(["cw721BaseNftInfo", client.contractAddress, JSON.stringify(args)], () => client.nftInfo({
    tokenId: args.tokenId
  }), options);
}
export interface Cw721BaseContractInfoQuery<TData> extends Cw721BaseReactQuery<ContractInfoResponse, TData> {}
export function useCw721BaseContractInfoQuery<TData = ContractInfoResponse>({
  client,
  options
}: Cw721BaseContractInfoQuery<TData>) {
  return useQuery<ContractInfoResponse, Error, TData>(["cw721BaseContractInfo", client.contractAddress], () => client.contractInfo(), options);
}
export interface Cw721BaseNumTokensQuery<TData> extends Cw721BaseReactQuery<NumTokensResponse, TData> {}
export function useCw721BaseNumTokensQuery<TData = NumTokensResponse>({
  client,
  options
}: Cw721BaseNumTokensQuery<TData>) {
  return useQuery<NumTokensResponse, Error, TData>(["cw721BaseNumTokens", client.contractAddress], () => client.numTokens(), options);
}
export interface Cw721BaseAllOperatorsQuery<TData> extends Cw721BaseReactQuery<AllOperatorsResponse, TData> {
  args: {
    includeExpired?: boolean;
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useCw721BaseAllOperatorsQuery<TData = AllOperatorsResponse>({
  client,
  args,
  options
}: Cw721BaseAllOperatorsQuery<TData>) {
  return useQuery<AllOperatorsResponse, Error, TData>(["cw721BaseAllOperators", client.contractAddress, JSON.stringify(args)], () => client.allOperators({
    includeExpired: args.includeExpired,
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Cw721BaseApprovalsQuery<TData> extends Cw721BaseReactQuery<ApprovalsResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useCw721BaseApprovalsQuery<TData = ApprovalsResponse>({
  client,
  args,
  options
}: Cw721BaseApprovalsQuery<TData>) {
  return useQuery<ApprovalsResponse, Error, TData>(["cw721BaseApprovals", client.contractAddress, JSON.stringify(args)], () => client.approvals({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Cw721BaseApprovalQuery<TData> extends Cw721BaseReactQuery<ApprovalResponse, TData> {
  args: {
    includeExpired?: boolean;
    spender: string;
    tokenId: string;
  };
}
export function useCw721BaseApprovalQuery<TData = ApprovalResponse>({
  client,
  args,
  options
}: Cw721BaseApprovalQuery<TData>) {
  return useQuery<ApprovalResponse, Error, TData>(["cw721BaseApproval", client.contractAddress, JSON.stringify(args)], () => client.approval({
    includeExpired: args.includeExpired,
    spender: args.spender,
    tokenId: args.tokenId
  }), options);
}
export interface Cw721BaseOwnerOfQuery<TData> extends Cw721BaseReactQuery<OwnerOfResponse, TData> {
  args: {
    includeExpired?: boolean;
    tokenId: string;
  };
}
export function useCw721BaseOwnerOfQuery<TData = OwnerOfResponse>({
  client,
  args,
  options
}: Cw721BaseOwnerOfQuery<TData>) {
  return useQuery<OwnerOfResponse, Error, TData>(["cw721BaseOwnerOf", client.contractAddress, JSON.stringify(args)], () => client.ownerOf({
    includeExpired: args.includeExpired,
    tokenId: args.tokenId
  }), options);
}
export interface Cw721BaseAdminQuery<TData> extends Cw721BaseReactQuery<AdminResponse, TData> {}
export function useCw721BaseAdminQuery<TData = AdminResponse>({
  client,
  options
}: Cw721BaseAdminQuery<TData>) {
  return useQuery<AdminResponse, Error, TData>(["cw721BaseAdmin", client.contractAddress], () => client.admin(), options);
}