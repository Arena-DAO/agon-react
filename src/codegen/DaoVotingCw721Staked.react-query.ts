/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { ActiveThreshold, Uint128, Decimal, NftContract, Binary, Duration, InstantiateMsg, ExecuteMsg, Cw721ReceiveMsg, QueryMsg, ActiveThresholdResponse, Addr, Config, HooksResponse, InfoResponse, ContractVersion, Boolean, Expiration, Timestamp, Uint64, NftClaimsResponse, NftClaim, ArrayOfString, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingCw721Staked.types";
import { DaoVotingCw721StakedQueryClient } from "./DaoVotingCw721Staked.client";
export interface DaoVotingCw721StakedReactQuery<TResponse, TData = TResponse> {
  client: DaoVotingCw721StakedQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoVotingCw721StakedInfoQuery<TData> extends DaoVotingCw721StakedReactQuery<InfoResponse, TData> {}
export function useDaoVotingCw721StakedInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoVotingCw721StakedInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["daoVotingCw721StakedInfo", client.contractAddress], () => client.info(), options);
}
export interface DaoVotingCw721StakedDaoQuery<TData> extends DaoVotingCw721StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw721StakedDaoQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw721StakedDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoVotingCw721StakedDao", client.contractAddress], () => client.dao(), options);
}
export interface DaoVotingCw721StakedTotalPowerAtHeightQuery<TData> extends DaoVotingCw721StakedReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoVotingCw721StakedTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw721StakedTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(["daoVotingCw721StakedTotalPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.totalPowerAtHeight({
    height: args.height
  }), options);
}
export interface DaoVotingCw721StakedVotingPowerAtHeightQuery<TData> extends DaoVotingCw721StakedReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoVotingCw721StakedVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw721StakedVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(["daoVotingCw721StakedVotingPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }), options);
}
export interface DaoVotingCw721StakedIsActiveQuery<TData> extends DaoVotingCw721StakedReactQuery<Boolean, TData> {}
export function useDaoVotingCw721StakedIsActiveQuery<TData = Boolean>({
  client,
  options
}: DaoVotingCw721StakedIsActiveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["daoVotingCw721StakedIsActive", client.contractAddress], () => client.isActive(), options);
}
export interface DaoVotingCw721StakedActiveThresholdQuery<TData> extends DaoVotingCw721StakedReactQuery<ActiveThresholdResponse, TData> {}
export function useDaoVotingCw721StakedActiveThresholdQuery<TData = ActiveThresholdResponse>({
  client,
  options
}: DaoVotingCw721StakedActiveThresholdQuery<TData>) {
  return useQuery<ActiveThresholdResponse, Error, TData>(["daoVotingCw721StakedActiveThreshold", client.contractAddress], () => client.activeThreshold(), options);
}
export interface DaoVotingCw721StakedStakedNftsQuery<TData> extends DaoVotingCw721StakedReactQuery<ArrayOfString, TData> {
  args: {
    address: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoVotingCw721StakedStakedNftsQuery<TData = ArrayOfString>({
  client,
  args,
  options
}: DaoVotingCw721StakedStakedNftsQuery<TData>) {
  return useQuery<ArrayOfString, Error, TData>(["daoVotingCw721StakedStakedNfts", client.contractAddress, JSON.stringify(args)], () => client.stakedNfts({
    address: args.address,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoVotingCw721StakedHooksQuery<TData> extends DaoVotingCw721StakedReactQuery<HooksResponse, TData> {}
export function useDaoVotingCw721StakedHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoVotingCw721StakedHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["daoVotingCw721StakedHooks", client.contractAddress], () => client.hooks(), options);
}
export interface DaoVotingCw721StakedNftClaimsQuery<TData> extends DaoVotingCw721StakedReactQuery<NftClaimsResponse, TData> {
  args: {
    address: string;
  };
}
export function useDaoVotingCw721StakedNftClaimsQuery<TData = NftClaimsResponse>({
  client,
  args,
  options
}: DaoVotingCw721StakedNftClaimsQuery<TData>) {
  return useQuery<NftClaimsResponse, Error, TData>(["daoVotingCw721StakedNftClaims", client.contractAddress, JSON.stringify(args)], () => client.nftClaims({
    address: args.address
  }), options);
}
export interface DaoVotingCw721StakedConfigQuery<TData> extends DaoVotingCw721StakedReactQuery<Config, TData> {}
export function useDaoVotingCw721StakedConfigQuery<TData = Config>({
  client,
  options
}: DaoVotingCw721StakedConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["daoVotingCw721StakedConfig", client.contractAddress], () => client.config(), options);
}