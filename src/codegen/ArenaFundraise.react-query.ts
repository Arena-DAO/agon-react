/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Duration, Uint128, Expiration, Timestamp, Uint64, InstantiateMsg, Coin, ExecuteMsg, QueryMsg, MigrateMsg, Addr, FundraiseState, Config, NullableUint128, DumpStateResponse } from "./ArenaFundraise.types";
import { ArenaFundraiseQueryClient } from "./ArenaFundraise.client";
export interface ArenaFundraiseReactQuery<TResponse, TData = TResponse> {
  client: ArenaFundraiseQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaFundraiseDumpStateQuery<TData> extends ArenaFundraiseReactQuery<DumpStateResponse, TData> {
  args: {
    addr?: string;
  };
}
export function useArenaFundraiseDumpStateQuery<TData = DumpStateResponse>({
  client,
  args,
  options
}: ArenaFundraiseDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(["arenaFundraiseDumpState", client.contractAddress, JSON.stringify(args)], () => client.dumpState({
    addr: args.addr
  }), options);
}
export interface ArenaFundraiseRewardQuery<TData> extends ArenaFundraiseReactQuery<NullableUint128, TData> {
  args: {
    addr: string;
  };
}
export function useArenaFundraiseRewardQuery<TData = NullableUint128>({
  client,
  args,
  options
}: ArenaFundraiseRewardQuery<TData>) {
  return useQuery<NullableUint128, Error, TData>(["arenaFundraiseReward", client.contractAddress, JSON.stringify(args)], () => client.reward({
    addr: args.addr
  }), options);
}
export interface ArenaFundraiseDepositQuery<TData> extends ArenaFundraiseReactQuery<NullableUint128, TData> {
  args: {
    addr: string;
  };
}
export function useArenaFundraiseDepositQuery<TData = NullableUint128>({
  client,
  args,
  options
}: ArenaFundraiseDepositQuery<TData>) {
  return useQuery<NullableUint128, Error, TData>(["arenaFundraiseDeposit", client.contractAddress, JSON.stringify(args)], () => client.deposit({
    addr: args.addr
  }), options);
}
export interface ArenaFundraiseTotalDepositedQuery<TData> extends ArenaFundraiseReactQuery<Uint128, TData> {}
export function useArenaFundraiseTotalDepositedQuery<TData = Uint128>({
  client,
  options
}: ArenaFundraiseTotalDepositedQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["arenaFundraiseTotalDeposited", client.contractAddress], () => client.totalDeposited(), options);
}
export interface ArenaFundraiseConfigQuery<TData> extends ArenaFundraiseReactQuery<Config, TData> {}
export function useArenaFundraiseConfigQuery<TData = Config>({
  client,
  options
}: ArenaFundraiseConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["arenaFundraiseConfig", client.contractAddress], () => client.config(), options);
}