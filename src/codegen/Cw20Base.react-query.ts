/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Uint128, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, MinterResponse, ExecuteMsg, Expiration, Timestamp, Uint64, QueryMsg, AllAccountsResponse, AllAllowancesResponse, AllowanceInfo, AllSpenderAllowancesResponse, SpenderAllowanceInfo, AllowanceResponse, BalanceResponse, DownloadLogoResponse, LogoInfo, Addr, MarketingInfoResponse, TokenInfoResponse } from "./Cw20Base.types";
import { Cw20BaseQueryClient } from "./Cw20Base.client";
export interface Cw20BaseReactQuery<TResponse, TData = TResponse> {
  client: Cw20BaseQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20BaseDownloadLogoQuery<TData> extends Cw20BaseReactQuery<DownloadLogoResponse, TData> {}
export function useCw20BaseDownloadLogoQuery<TData = DownloadLogoResponse>({
  client,
  options
}: Cw20BaseDownloadLogoQuery<TData>) {
  return useQuery<DownloadLogoResponse, Error, TData>(["cw20BaseDownloadLogo", client.contractAddress], () => client.downloadLogo(), options);
}
export interface Cw20BaseMarketingInfoQuery<TData> extends Cw20BaseReactQuery<MarketingInfoResponse, TData> {}
export function useCw20BaseMarketingInfoQuery<TData = MarketingInfoResponse>({
  client,
  options
}: Cw20BaseMarketingInfoQuery<TData>) {
  return useQuery<MarketingInfoResponse, Error, TData>(["cw20BaseMarketingInfo", client.contractAddress], () => client.marketingInfo(), options);
}
export interface Cw20BaseAllAccountsQuery<TData> extends Cw20BaseReactQuery<AllAccountsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20BaseAllAccountsQuery<TData = AllAccountsResponse>({
  client,
  args,
  options
}: Cw20BaseAllAccountsQuery<TData>) {
  return useQuery<AllAccountsResponse, Error, TData>(["cw20BaseAllAccounts", client.contractAddress, JSON.stringify(args)], () => client.allAccounts({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface Cw20BaseAllSpenderAllowancesQuery<TData> extends Cw20BaseReactQuery<AllSpenderAllowancesResponse, TData> {
  args: {
    limit?: number;
    spender: string;
    startAfter?: string;
  };
}
export function useCw20BaseAllSpenderAllowancesQuery<TData = AllSpenderAllowancesResponse>({
  client,
  args,
  options
}: Cw20BaseAllSpenderAllowancesQuery<TData>) {
  return useQuery<AllSpenderAllowancesResponse, Error, TData>(["cw20BaseAllSpenderAllowances", client.contractAddress, JSON.stringify(args)], () => client.allSpenderAllowances({
    limit: args.limit,
    spender: args.spender,
    startAfter: args.startAfter
  }), options);
}
export interface Cw20BaseAllAllowancesQuery<TData> extends Cw20BaseReactQuery<AllAllowancesResponse, TData> {
  args: {
    limit?: number;
    owner: string;
    startAfter?: string;
  };
}
export function useCw20BaseAllAllowancesQuery<TData = AllAllowancesResponse>({
  client,
  args,
  options
}: Cw20BaseAllAllowancesQuery<TData>) {
  return useQuery<AllAllowancesResponse, Error, TData>(["cw20BaseAllAllowances", client.contractAddress, JSON.stringify(args)], () => client.allAllowances({
    limit: args.limit,
    owner: args.owner,
    startAfter: args.startAfter
  }), options);
}
export interface Cw20BaseAllowanceQuery<TData> extends Cw20BaseReactQuery<AllowanceResponse, TData> {
  args: {
    owner: string;
    spender: string;
  };
}
export function useCw20BaseAllowanceQuery<TData = AllowanceResponse>({
  client,
  args,
  options
}: Cw20BaseAllowanceQuery<TData>) {
  return useQuery<AllowanceResponse, Error, TData>(["cw20BaseAllowance", client.contractAddress, JSON.stringify(args)], () => client.allowance({
    owner: args.owner,
    spender: args.spender
  }), options);
}
export interface Cw20BaseMinterQuery<TData> extends Cw20BaseReactQuery<MinterResponse, TData> {}
export function useCw20BaseMinterQuery<TData = MinterResponse>({
  client,
  options
}: Cw20BaseMinterQuery<TData>) {
  return useQuery<MinterResponse, Error, TData>(["cw20BaseMinter", client.contractAddress], () => client.minter(), options);
}
export interface Cw20BaseTokenInfoQuery<TData> extends Cw20BaseReactQuery<TokenInfoResponse, TData> {}
export function useCw20BaseTokenInfoQuery<TData = TokenInfoResponse>({
  client,
  options
}: Cw20BaseTokenInfoQuery<TData>) {
  return useQuery<TokenInfoResponse, Error, TData>(["cw20BaseTokenInfo", client.contractAddress], () => client.tokenInfo(), options);
}
export interface Cw20BaseBalanceQuery<TData> extends Cw20BaseReactQuery<BalanceResponse, TData> {
  args: {
    address: string;
  };
}
export function useCw20BaseBalanceQuery<TData = BalanceResponse>({
  client,
  args,
  options
}: Cw20BaseBalanceQuery<TData>) {
  return useQuery<BalanceResponse, Error, TData>(["cw20BaseBalance", client.contractAddress, JSON.stringify(args)], () => client.balance({
    address: args.address
  }), options);
}