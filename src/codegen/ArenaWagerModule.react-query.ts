/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, Empty, ExecuteMsg, Binary, Decimal, Uint128, Expiration, Timestamp, Uint64, ModuleInfo, Admin, MigrateMsg, CompetitionsFilter, CompetitionStatus, Action, ProposeMessage, FeeInformationForString, DistributionForString, MemberPercentageForString, EscrowInstantiateInfo, ModuleInstantiateInfo, WagerInstantiateExt, QueryMsg, Null, Addr, CompetitionResponseForWagerExt, WagerExt, FeeInformationForAddr, ArrayOfCompetitionResponseForWagerExt, ConfigForEmpty, String, ArrayOfEvidence, Evidence, OwnershipForString, NullableDistributionForString } from "./ArenaWagerModule.types";
import { ArenaWagerModuleQueryClient, ArenaWagerModuleClient } from "./ArenaWagerModule.client";
export const arenaWagerModuleQueryKeys = {
  contract: ([{
    contract: "arenaWagerModule"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...arenaWagerModuleQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  dAO: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "d_a_o",
    args
  }] as const),
  competitionCount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "competition_count",
    args
  }] as const),
  competition: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "competition",
    args
  }] as const),
  competitions: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "competitions",
    args
  }] as const),
  evidence: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "evidence",
    args
  }] as const),
  result: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "result",
    args
  }] as const),
  queryExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "query_extension",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...arenaWagerModuleQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const arenaWagerModuleQueries = {
  config: <TData = ConfigForEmpty,>({
    client,
    options
  }: ArenaWagerModuleConfigQuery<TData>): UseQueryOptions<ConfigForEmpty, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dAO: <TData = String,>({
    client,
    options
  }: ArenaWagerModuleDAOQuery<TData>): UseQueryOptions<String, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.dAO(client?.contractAddress),
    queryFn: () => client ? client.dAO() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  competitionCount: <TData = Uint128,>({
    client,
    options
  }: ArenaWagerModuleCompetitionCountQuery<TData>): UseQueryOptions<Uint128, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.competitionCount(client?.contractAddress),
    queryFn: () => client ? client.competitionCount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  competition: <TData = CompetitionResponseForWagerExt,>({
    client,
    args,
    options
  }: ArenaWagerModuleCompetitionQuery<TData>): UseQueryOptions<CompetitionResponseForWagerExt, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.competition(client?.contractAddress, args),
    queryFn: () => client ? client.competition({
      competitionId: args.competitionId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  competitions: <TData = ArrayOfCompetitionResponseForWagerExt,>({
    client,
    args,
    options
  }: ArenaWagerModuleCompetitionsQuery<TData>): UseQueryOptions<ArrayOfCompetitionResponseForWagerExt, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.competitions(client?.contractAddress, args),
    queryFn: () => client ? client.competitions({
      filter: args.filter,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  evidence: <TData = ArrayOfEvidence,>({
    client,
    args,
    options
  }: ArenaWagerModuleEvidenceQuery<TData>): UseQueryOptions<ArrayOfEvidence, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.evidence(client?.contractAddress, args),
    queryFn: () => client ? client.evidence({
      competitionId: args.competitionId,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  result: <TData = NullableDistributionForString,>({
    client,
    args,
    options
  }: ArenaWagerModuleResultQuery<TData>): UseQueryOptions<NullableDistributionForString, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.result(client?.contractAddress, args),
    queryFn: () => client ? client.result({
      competitionId: args.competitionId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  queryExtension: <TData = Binary,>({
    client,
    args,
    options
  }: ArenaWagerModuleQueryExtensionQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.queryExtension(client?.contractAddress, args),
    queryFn: () => client ? client.queryExtension({
      msg: args.msg
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: ArenaWagerModuleOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: arenaWagerModuleQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ArenaWagerModuleReactQuery<TResponse, TData = TResponse> {
  client: ArenaWagerModuleQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaWagerModuleOwnershipQuery<TData> extends ArenaWagerModuleReactQuery<OwnershipForString, TData> {}
export function useArenaWagerModuleOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaWagerModuleOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(arenaWagerModuleQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleQueryExtensionQuery<TData> extends ArenaWagerModuleReactQuery<Binary, TData> {
  args: {
    msg: Empty;
  };
}
export function useArenaWagerModuleQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: ArenaWagerModuleQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(arenaWagerModuleQueryKeys.queryExtension(client?.contractAddress, args), () => client ? client.queryExtension({
    msg: args.msg
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleResultQuery<TData> extends ArenaWagerModuleReactQuery<NullableDistributionForString, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaWagerModuleResultQuery<TData = NullableDistributionForString>({
  client,
  args,
  options
}: ArenaWagerModuleResultQuery<TData>) {
  return useQuery<NullableDistributionForString, Error, TData>(arenaWagerModuleQueryKeys.result(client?.contractAddress, args), () => client ? client.result({
    competitionId: args.competitionId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleEvidenceQuery<TData> extends ArenaWagerModuleReactQuery<ArrayOfEvidence, TData> {
  args: {
    competitionId: Uint128;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaWagerModuleEvidenceQuery<TData = ArrayOfEvidence>({
  client,
  args,
  options
}: ArenaWagerModuleEvidenceQuery<TData>) {
  return useQuery<ArrayOfEvidence, Error, TData>(arenaWagerModuleQueryKeys.evidence(client?.contractAddress, args), () => client ? client.evidence({
    competitionId: args.competitionId,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleCompetitionsQuery<TData> extends ArenaWagerModuleReactQuery<ArrayOfCompetitionResponseForWagerExt, TData> {
  args: {
    filter?: CompetitionsFilter;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaWagerModuleCompetitionsQuery<TData = ArrayOfCompetitionResponseForWagerExt>({
  client,
  args,
  options
}: ArenaWagerModuleCompetitionsQuery<TData>) {
  return useQuery<ArrayOfCompetitionResponseForWagerExt, Error, TData>(arenaWagerModuleQueryKeys.competitions(client?.contractAddress, args), () => client ? client.competitions({
    filter: args.filter,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleCompetitionQuery<TData> extends ArenaWagerModuleReactQuery<CompetitionResponseForWagerExt, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaWagerModuleCompetitionQuery<TData = CompetitionResponseForWagerExt>({
  client,
  args,
  options
}: ArenaWagerModuleCompetitionQuery<TData>) {
  return useQuery<CompetitionResponseForWagerExt, Error, TData>(arenaWagerModuleQueryKeys.competition(client?.contractAddress, args), () => client ? client.competition({
    competitionId: args.competitionId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleCompetitionCountQuery<TData> extends ArenaWagerModuleReactQuery<Uint128, TData> {}
export function useArenaWagerModuleCompetitionCountQuery<TData = Uint128>({
  client,
  options
}: ArenaWagerModuleCompetitionCountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(arenaWagerModuleQueryKeys.competitionCount(client?.contractAddress), () => client ? client.competitionCount() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleDAOQuery<TData> extends ArenaWagerModuleReactQuery<String, TData> {}
export function useArenaWagerModuleDAOQuery<TData = String>({
  client,
  options
}: ArenaWagerModuleDAOQuery<TData>) {
  return useQuery<String, Error, TData>(arenaWagerModuleQueryKeys.dAO(client?.contractAddress), () => client ? client.dAO() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleConfigQuery<TData> extends ArenaWagerModuleReactQuery<ConfigForEmpty, TData> {}
export function useArenaWagerModuleConfigQuery<TData = ConfigForEmpty>({
  client,
  options
}: ArenaWagerModuleConfigQuery<TData>) {
  return useQuery<ConfigForEmpty, Error, TData>(arenaWagerModuleQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaWagerModuleUpdateOwnershipMutation {
  client: ArenaWagerModuleClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleMigrateEscrowsMutation {
  client: ArenaWagerModuleClient;
  msg: {
    escrowCodeId: number;
    escrowMigrateMsg: MigrateMsg;
    filter?: CompetitionsFilter;
    limit?: number;
    startAfter?: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleMigrateEscrowsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleMigrateEscrowsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleMigrateEscrowsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.migrateEscrows(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleActivateManuallyMutation {
  client: ArenaWagerModuleClient;
  msg: {
    id: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleActivateManuallyMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleActivateManuallyMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleActivateManuallyMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.activateManually(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleExtensionMutation {
  client: ArenaWagerModuleClient;
  msg: {
    msg: Empty;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleProcessCompetitionMutation {
  client: ArenaWagerModuleClient;
  msg: {
    competitionId: Uint128;
    distribution?: DistributionForString;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleProcessCompetitionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleProcessCompetitionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleProcessCompetitionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.processCompetition(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleSubmitEvidenceMutation {
  client: ArenaWagerModuleClient;
  msg: {
    competitionId: Uint128;
    evidence: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleSubmitEvidenceMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleSubmitEvidenceMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleSubmitEvidenceMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.submitEvidence(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleCreateCompetitionMutation {
  client: ArenaWagerModuleClient;
  msg: {
    banner?: string;
    categoryId?: Uint128;
    description: string;
    escrow?: EscrowInstantiateInfo;
    expiration: Expiration;
    host: ModuleInfo;
    instantiateExtension: WagerInstantiateExt;
    name: string;
    rules: string[];
    rulesets: Uint128[];
    shouldActivateOnFunded?: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleCreateCompetitionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleCreateCompetitionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleCreateCompetitionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createCompetition(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleExecuteCompetitionHookMutation {
  client: ArenaWagerModuleClient;
  msg: {
    competitionId: Uint128;
    distribution?: DistributionForString;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleExecuteCompetitionHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleExecuteCompetitionHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleExecuteCompetitionHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeCompetitionHook(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleRemoveCompetitionHookMutation {
  client: ArenaWagerModuleClient;
  msg: {
    competitionId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleRemoveCompetitionHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleRemoveCompetitionHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleRemoveCompetitionHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeCompetitionHook(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleAddCompetitionHookMutation {
  client: ArenaWagerModuleClient;
  msg: {
    competitionId: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleAddCompetitionHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleAddCompetitionHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleAddCompetitionHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addCompetitionHook(msg, fee, memo, funds), options);
}
export interface ArenaWagerModuleActivateMutation {
  client: ArenaWagerModuleClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleActivateMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleActivateMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleActivateMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.activate(fee, memo, funds), options);
}
export interface ArenaWagerModuleJailCompetitionMutation {
  client: ArenaWagerModuleClient;
  msg: {
    proposeMessage: ProposeMessage;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaWagerModuleJailCompetitionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaWagerModuleJailCompetitionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaWagerModuleJailCompetitionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.jailCompetition(msg, fee, memo, funds), options);
}