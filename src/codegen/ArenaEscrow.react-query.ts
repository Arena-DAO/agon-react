/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Uint128, InstantiateMsg, MemberBalanceUnchecked, BalanceUnchecked, Cw20Coin, Cw721Collection, Coin, ExecuteMsg, Binary, Decimal, Action, Expiration, Timestamp, Uint64, MemberPercentageForString, Cw20ReceiveMsg, Cw721ReceiveMsg, CompetitionEscrowDistributeMsg, TaxInformationForString, QueryMsg, MigrateMsg, NullableBalanceVerified, Addr, BalanceVerified, Cw20CoinVerified, Cw721CollectionVerified, ArrayOfMemberBalanceChecked, MemberBalanceChecked, NullableArrayOfMemberPercentageForString, DumpStateResponse, Boolean, OwnershipForString } from "./ArenaEscrow.types";
import { ArenaEscrowQueryClient } from "./ArenaEscrow.client";
export interface ArenaEscrowReactQuery<TResponse, TData = TResponse> {
  client: ArenaEscrowQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaEscrowOwnershipQuery<TData> extends ArenaEscrowReactQuery<OwnershipForString, TData> {}
export function useArenaEscrowOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaEscrowOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(["arenaEscrowOwnership", client.contractAddress], () => client.ownership(), options);
}
export interface ArenaEscrowDumpStateQuery<TData> extends ArenaEscrowReactQuery<DumpStateResponse, TData> {
  args: {
    addr?: string;
  };
}
export function useArenaEscrowDumpStateQuery<TData = DumpStateResponse>({
  client,
  args,
  options
}: ArenaEscrowDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(["arenaEscrowDumpState", client.contractAddress, JSON.stringify(args)], () => client.dumpState({
    addr: args.addr
  }), options);
}
export interface ArenaEscrowDistributionQuery<TData> extends ArenaEscrowReactQuery<NullableArrayOfMemberPercentageForString, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowDistributionQuery<TData = NullableArrayOfMemberPercentageForString>({
  client,
  args,
  options
}: ArenaEscrowDistributionQuery<TData>) {
  return useQuery<NullableArrayOfMemberPercentageForString, Error, TData>(["arenaEscrowDistribution", client.contractAddress, JSON.stringify(args)], () => client.distribution({
    addr: args.addr
  }), options);
}
export interface ArenaEscrowIsLockedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {}
export function useArenaEscrowIsLockedQuery<TData = Boolean>({
  client,
  options
}: ArenaEscrowIsLockedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["arenaEscrowIsLocked", client.contractAddress], () => client.isLocked(), options);
}
export interface ArenaEscrowTotalBalanceQuery<TData> extends ArenaEscrowReactQuery<NullableBalanceVerified, TData> {}
export function useArenaEscrowTotalBalanceQuery<TData = NullableBalanceVerified>({
  client,
  options
}: ArenaEscrowTotalBalanceQuery<TData>) {
  return useQuery<NullableBalanceVerified, Error, TData>(["arenaEscrowTotalBalance", client.contractAddress], () => client.totalBalance(), options);
}
export interface ArenaEscrowIsFullyFundedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {}
export function useArenaEscrowIsFullyFundedQuery<TData = Boolean>({
  client,
  options
}: ArenaEscrowIsFullyFundedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["arenaEscrowIsFullyFunded", client.contractAddress], () => client.isFullyFunded(), options);
}
export interface ArenaEscrowIsFundedQuery<TData> extends ArenaEscrowReactQuery<Boolean, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowIsFundedQuery<TData = Boolean>({
  client,
  args,
  options
}: ArenaEscrowIsFundedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["arenaEscrowIsFunded", client.contractAddress, JSON.stringify(args)], () => client.isFunded({
    addr: args.addr
  }), options);
}
export interface ArenaEscrowInitialDuesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowInitialDuesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowInitialDuesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(["arenaEscrowInitialDues", client.contractAddress, JSON.stringify(args)], () => client.initialDues({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaEscrowDuesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowDuesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowDuesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(["arenaEscrowDues", client.contractAddress, JSON.stringify(args)], () => client.dues({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaEscrowDueQuery<TData> extends ArenaEscrowReactQuery<NullableBalanceVerified, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowDueQuery<TData = NullableBalanceVerified>({
  client,
  args,
  options
}: ArenaEscrowDueQuery<TData>) {
  return useQuery<NullableBalanceVerified, Error, TData>(["arenaEscrowDue", client.contractAddress, JSON.stringify(args)], () => client.due({
    addr: args.addr
  }), options);
}
export interface ArenaEscrowBalanceQuery<TData> extends ArenaEscrowReactQuery<NullableBalanceVerified, TData> {
  args: {
    addr: string;
  };
}
export function useArenaEscrowBalanceQuery<TData = NullableBalanceVerified>({
  client,
  args,
  options
}: ArenaEscrowBalanceQuery<TData>) {
  return useQuery<NullableBalanceVerified, Error, TData>(["arenaEscrowBalance", client.contractAddress, JSON.stringify(args)], () => client.balance({
    addr: args.addr
  }), options);
}
export interface ArenaEscrowBalancesQuery<TData> extends ArenaEscrowReactQuery<ArrayOfMemberBalanceChecked, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useArenaEscrowBalancesQuery<TData = ArrayOfMemberBalanceChecked>({
  client,
  args,
  options
}: ArenaEscrowBalancesQuery<TData>) {
  return useQuery<ArrayOfMemberBalanceChecked, Error, TData>(["arenaEscrowBalances", client.contractAddress, JSON.stringify(args)], () => client.balances({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}