/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Duration, PercentageThreshold, Decimal, InstantiateMsg, ExecuteMsg, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Choice, Coin, Empty, IbcTimeout, IbcTimeoutBlock, UncheckedConfig, QueryMsg, Config, Addr, InfoResponse, ContractVersion, Status, Expiration, Cell, Winner, ProposalResponse, Proposal, Tally, M } from "./DaoProposalCondorcet.types";
import { DaoProposalCondorcetQueryClient } from "./DaoProposalCondorcet.client";
export interface DaoProposalCondorcetReactQuery<TResponse, TData = TResponse> {
  client: DaoProposalCondorcetQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoProposalCondorcetNextProposalIdQuery<TData> extends DaoProposalCondorcetReactQuery<Uint64, TData> {}
export function useDaoProposalCondorcetNextProposalIdQuery<TData = Uint64>({
  client,
  options
}: DaoProposalCondorcetNextProposalIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(["daoProposalCondorcetNextProposalId", client.contractAddress], () => client.nextProposalId(), options);
}
export interface DaoProposalCondorcetInfoQuery<TData> extends DaoProposalCondorcetReactQuery<InfoResponse, TData> {}
export function useDaoProposalCondorcetInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoProposalCondorcetInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["daoProposalCondorcetInfo", client.contractAddress], () => client.info(), options);
}
export interface DaoProposalCondorcetDaoQuery<TData> extends DaoProposalCondorcetReactQuery<Addr, TData> {}
export function useDaoProposalCondorcetDaoQuery<TData = Addr>({
  client,
  options
}: DaoProposalCondorcetDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoProposalCondorcetDao", client.contractAddress], () => client.dao(), options);
}
export interface DaoProposalCondorcetConfigQuery<TData> extends DaoProposalCondorcetReactQuery<Config, TData> {}
export function useDaoProposalCondorcetConfigQuery<TData = Config>({
  client,
  options
}: DaoProposalCondorcetConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["daoProposalCondorcetConfig", client.contractAddress], () => client.config(), options);
}
export interface DaoProposalCondorcetProposalQuery<TData> extends DaoProposalCondorcetReactQuery<ProposalResponse, TData> {
  args: {
    id: number;
  };
}
export function useDaoProposalCondorcetProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options
}: DaoProposalCondorcetProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(["daoProposalCondorcetProposal", client.contractAddress, JSON.stringify(args)], () => client.proposal({
    id: args.id
  }), options);
}