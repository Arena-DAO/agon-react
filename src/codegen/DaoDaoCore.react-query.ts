/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Admin, Uint128, Binary, InstantiateMsg, InitialItem, ModuleInstantiateInfo, Coin, ExecuteMsg, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Duration, Empty, IbcTimeout, IbcTimeoutBlock, Cw20ReceiveMsg, Cw721ReceiveMsg, Config, SubDao, QueryMsg, MigrateMsg, PreProposeInfo, MigrateParams, MigrateV1ToV2, MigrationModuleParams, ProposalParams, V1CodeIds, V2CodeIds, Addr, ProposalModuleStatus, ArrayOfProposalModule, ProposalModule, AdminNominationResponse, Cw20BalanceResponse, ArrayOfAddr, DaoURIResponse, PauseInfoResponse, Expiration, DumpStateResponse, ContractVersion, GetItemResponse, InfoResponse, ArrayOfString, ArrayOfSubDao, ProposalModuleCountResponse, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoDaoCore.types";
import { DaoDaoCoreQueryClient } from "./DaoDaoCore.client";
export interface DaoDaoCoreReactQuery<TResponse, TData = TResponse> {
  client: DaoDaoCoreQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoDaoCoreTotalPowerAtHeightQuery<TData> extends DaoDaoCoreReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoDaoCoreTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoDaoCoreTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(["daoDaoCoreTotalPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.totalPowerAtHeight({
    height: args.height
  }), options);
}
export interface DaoDaoCoreVotingPowerAtHeightQuery<TData> extends DaoDaoCoreReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoDaoCoreVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoDaoCoreVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(["daoDaoCoreVotingPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }), options);
}
export interface DaoDaoCoreDaoURIQuery<TData> extends DaoDaoCoreReactQuery<DaoURIResponse, TData> {}
export function useDaoDaoCoreDaoURIQuery<TData = DaoURIResponse>({
  client,
  options
}: DaoDaoCoreDaoURIQuery<TData>) {
  return useQuery<DaoURIResponse, Error, TData>(["daoDaoCoreDaoURI", client.contractAddress], () => client.daoURI(), options);
}
export interface DaoDaoCoreListSubDaosQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfSubDao, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreListSubDaosQuery<TData = ArrayOfSubDao>({
  client,
  args,
  options
}: DaoDaoCoreListSubDaosQuery<TData>) {
  return useQuery<ArrayOfSubDao, Error, TData>(["daoDaoCoreListSubDaos", client.contractAddress, JSON.stringify(args)], () => client.listSubDaos({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreVotingModuleQuery<TData> extends DaoDaoCoreReactQuery<Addr, TData> {}
export function useDaoDaoCoreVotingModuleQuery<TData = Addr>({
  client,
  options
}: DaoDaoCoreVotingModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoDaoCoreVotingModule", client.contractAddress], () => client.votingModule(), options);
}
export interface DaoDaoCorePauseInfoQuery<TData> extends DaoDaoCoreReactQuery<PauseInfoResponse, TData> {}
export function useDaoDaoCorePauseInfoQuery<TData = PauseInfoResponse>({
  client,
  options
}: DaoDaoCorePauseInfoQuery<TData>) {
  return useQuery<PauseInfoResponse, Error, TData>(["daoDaoCorePauseInfo", client.contractAddress], () => client.pauseInfo(), options);
}
export interface DaoDaoCoreProposalModuleCountQuery<TData> extends DaoDaoCoreReactQuery<ProposalModuleCountResponse, TData> {}
export function useDaoDaoCoreProposalModuleCountQuery<TData = ProposalModuleCountResponse>({
  client,
  options
}: DaoDaoCoreProposalModuleCountQuery<TData>) {
  return useQuery<ProposalModuleCountResponse, Error, TData>(["daoDaoCoreProposalModuleCount", client.contractAddress], () => client.proposalModuleCount(), options);
}
export interface DaoDaoCoreActiveProposalModulesQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreActiveProposalModulesQuery<TData = ArrayOfProposalModule>({
  client,
  args,
  options
}: DaoDaoCoreActiveProposalModulesQuery<TData>) {
  return useQuery<ArrayOfProposalModule, Error, TData>(["daoDaoCoreActiveProposalModules", client.contractAddress, JSON.stringify(args)], () => client.activeProposalModules({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreProposalModulesQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreProposalModulesQuery<TData = ArrayOfProposalModule>({
  client,
  args,
  options
}: DaoDaoCoreProposalModulesQuery<TData>) {
  return useQuery<ArrayOfProposalModule, Error, TData>(["daoDaoCoreProposalModules", client.contractAddress, JSON.stringify(args)], () => client.proposalModules({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreInfoQuery<TData> extends DaoDaoCoreReactQuery<InfoResponse, TData> {}
export function useDaoDaoCoreInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoDaoCoreInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["daoDaoCoreInfo", client.contractAddress], () => client.info(), options);
}
export interface DaoDaoCoreListItemsQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfString, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreListItemsQuery<TData = ArrayOfString>({
  client,
  args,
  options
}: DaoDaoCoreListItemsQuery<TData>) {
  return useQuery<ArrayOfString, Error, TData>(["daoDaoCoreListItems", client.contractAddress, JSON.stringify(args)], () => client.listItems({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreGetItemQuery<TData> extends DaoDaoCoreReactQuery<GetItemResponse, TData> {
  args: {
    key: string;
  };
}
export function useDaoDaoCoreGetItemQuery<TData = GetItemResponse>({
  client,
  args,
  options
}: DaoDaoCoreGetItemQuery<TData>) {
  return useQuery<GetItemResponse, Error, TData>(["daoDaoCoreGetItem", client.contractAddress, JSON.stringify(args)], () => client.getItem({
    key: args.key
  }), options);
}
export interface DaoDaoCoreDumpStateQuery<TData> extends DaoDaoCoreReactQuery<DumpStateResponse, TData> {}
export function useDaoDaoCoreDumpStateQuery<TData = DumpStateResponse>({
  client,
  options
}: DaoDaoCoreDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(["daoDaoCoreDumpState", client.contractAddress], () => client.dumpState(), options);
}
export interface DaoDaoCoreCw721TokenListQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreCw721TokenListQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: DaoDaoCoreCw721TokenListQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(["daoDaoCoreCw721TokenList", client.contractAddress, JSON.stringify(args)], () => client.cw721TokenList({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreCw20TokenListQuery<TData> extends DaoDaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreCw20TokenListQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: DaoDaoCoreCw20TokenListQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(["daoDaoCoreCw20TokenList", client.contractAddress, JSON.stringify(args)], () => client.cw20TokenList({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreCw20BalancesQuery<TData> extends DaoDaoCoreReactQuery<Cw20BalanceResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoDaoCoreCw20BalancesQuery<TData = Cw20BalanceResponse>({
  client,
  args,
  options
}: DaoDaoCoreCw20BalancesQuery<TData>) {
  return useQuery<Cw20BalanceResponse, Error, TData>(["daoDaoCoreCw20Balances", client.contractAddress, JSON.stringify(args)], () => client.cw20Balances({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoDaoCoreConfigQuery<TData> extends DaoDaoCoreReactQuery<Config, TData> {}
export function useDaoDaoCoreConfigQuery<TData = Config>({
  client,
  options
}: DaoDaoCoreConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["daoDaoCoreConfig", client.contractAddress], () => client.config(), options);
}
export interface DaoDaoCoreAdminNominationQuery<TData> extends DaoDaoCoreReactQuery<AdminNominationResponse, TData> {}
export function useDaoDaoCoreAdminNominationQuery<TData = AdminNominationResponse>({
  client,
  options
}: DaoDaoCoreAdminNominationQuery<TData>) {
  return useQuery<AdminNominationResponse, Error, TData>(["daoDaoCoreAdminNomination", client.contractAddress], () => client.adminNomination(), options);
}
export interface DaoDaoCoreAdminQuery<TData> extends DaoDaoCoreReactQuery<Addr, TData> {}
export function useDaoDaoCoreAdminQuery<TData = Addr>({
  client,
  options
}: DaoDaoCoreAdminQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoDaoCoreAdmin", client.contractAddress], () => client.admin(), options);
}