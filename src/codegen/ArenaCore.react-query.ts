/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { Uint128, DepositToken, UncheckedDenom, DepositRefundPolicy, Admin, Binary, Duration, Decimal, InstantiateMsg, UncheckedDepositInfo, InstantiateExt, NewCompetitionCategory, ModuleInstantiateInfo, NewRuleset, TaxConfiguration, ExecuteMsg, ExecuteExt, EditCompetitionCategory, Status, ProposeMessage, FeeInformationForString, DistributionForString, MemberPercentageForString, MemberResultForString, QueryMsg, QueryExt, CompetitionModuleQuery, MigrateMsg, Timestamp, Uint64, SudoMsg, CompetitionCategory, DumpStateResponse, CompetitionModuleResponseForString, Rating, BlockInfo, Ruleset, CheckedDenom, Addr, Config, CheckedDepositInfo, DepositInfoResponse, HooksResponse } from "./ArenaCore.types";
import { ArenaCoreQueryClient } from "./ArenaCore.client";
export interface ArenaCoreReactQuery<TResponse, TData = TResponse> {
  client: ArenaCoreQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaCoreQueryExtensionQuery<TData> extends ArenaCoreReactQuery<Binary, TData> {
  args: {
    msg: QueryExt;
  };
}
export function useArenaCoreQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: ArenaCoreQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(["arenaCoreQueryExtension", client.contractAddress, JSON.stringify(args)], () => client.queryExtension({
    msg: args.msg
  }), options);
}
export interface ArenaCoreProposalSubmittedHooksQuery<TData> extends ArenaCoreReactQuery<HooksResponse, TData> {}
export function useArenaCoreProposalSubmittedHooksQuery<TData = HooksResponse>({
  client,
  options
}: ArenaCoreProposalSubmittedHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(["arenaCoreProposalSubmittedHooks", client.contractAddress], () => client.proposalSubmittedHooks(), options);
}
export interface ArenaCoreDepositInfoQuery<TData> extends ArenaCoreReactQuery<DepositInfoResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useArenaCoreDepositInfoQuery<TData = DepositInfoResponse>({
  client,
  args,
  options
}: ArenaCoreDepositInfoQuery<TData>) {
  return useQuery<DepositInfoResponse, Error, TData>(["arenaCoreDepositInfo", client.contractAddress, JSON.stringify(args)], () => client.depositInfo({
    proposalId: args.proposalId
  }), options);
}
export interface ArenaCoreConfigQuery<TData> extends ArenaCoreReactQuery<Config, TData> {}
export function useArenaCoreConfigQuery<TData = Config>({
  client,
  options
}: ArenaCoreConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["arenaCoreConfig", client.contractAddress], () => client.config(), options);
}
export interface ArenaCoreDaoQuery<TData> extends ArenaCoreReactQuery<Addr, TData> {}
export function useArenaCoreDaoQuery<TData = Addr>({
  client,
  options
}: ArenaCoreDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(["arenaCoreDao", client.contractAddress], () => client.dao(), options);
}
export interface ArenaCoreProposalModuleQuery<TData> extends ArenaCoreReactQuery<Addr, TData> {}
export function useArenaCoreProposalModuleQuery<TData = Addr>({
  client,
  options
}: ArenaCoreProposalModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(["arenaCoreProposalModule", client.contractAddress], () => client.proposalModule(), options);
}