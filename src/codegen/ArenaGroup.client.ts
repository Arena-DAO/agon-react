/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint64, InstantiateMsg, AddMemberMsg, ExecuteMsg, Action, Expiration, Timestamp, MemberMsgForString, QueryMsg, MigrateMsg, Boolean, MemberListResponse, Member, MemberResponse, Addr, ArrayOfMemberMsgForAddr, MemberMsgForAddr, OwnershipForString, TotalWeightResponse } from "./ArenaGroup.types";
export interface ArenaGroupReadOnlyInterface {
  contractAddress: string;
  members: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: MemberMsgForString;
  }) => Promise<ArrayOfMemberMsgForAddr>;
  membersCount: () => Promise<Uint64>;
  isValidDistribution: ({
    addrs
  }: {
    addrs: string[];
  }) => Promise<Boolean>;
  isMember: ({
    addr
  }: {
    addr: string;
  }) => Promise<Boolean>;
  totalWeight: ({
    atHeight
  }: {
    atHeight?: number;
  }) => Promise<TotalWeightResponse>;
  listMembers: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }) => Promise<MemberListResponse>;
  member: ({
    addr,
    atHeight
  }: {
    addr: string;
    atHeight?: number;
  }) => Promise<MemberResponse>;
  ownership: () => Promise<OwnershipForString>;
}
export class ArenaGroupQueryClient implements ArenaGroupReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.members = this.members.bind(this);
    this.membersCount = this.membersCount.bind(this);
    this.isValidDistribution = this.isValidDistribution.bind(this);
    this.isMember = this.isMember.bind(this);
    this.totalWeight = this.totalWeight.bind(this);
    this.listMembers = this.listMembers.bind(this);
    this.member = this.member.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  members = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: MemberMsgForString;
  }): Promise<ArrayOfMemberMsgForAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      members: {
        limit,
        start_after: startAfter
      }
    });
  };
  membersCount = async (): Promise<Uint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      members_count: {}
    });
  };
  isValidDistribution = async ({
    addrs
  }: {
    addrs: string[];
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_valid_distribution: {
        addrs
      }
    });
  };
  isMember = async ({
    addr
  }: {
    addr: string;
  }): Promise<Boolean> => {
    return this.client.queryContractSmart(this.contractAddress, {
      is_member: {
        addr
      }
    });
  };
  totalWeight = async ({
    atHeight
  }: {
    atHeight?: number;
  }): Promise<TotalWeightResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      total_weight: {
        at_height: atHeight
      }
    });
  };
  listMembers = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: string;
  }): Promise<MemberListResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      list_members: {
        limit,
        start_after: startAfter
      }
    });
  };
  member = async ({
    addr,
    atHeight
  }: {
    addr: string;
    atHeight?: number;
  }): Promise<MemberResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      member: {
        addr,
        at_height: atHeight
      }
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ArenaGroupInterface extends ArenaGroupReadOnlyInterface {
  contractAddress: string;
  sender: string;
  updateMembers: ({
    toAdd,
    toRemove,
    toUpdate
  }: {
    toAdd?: AddMemberMsg[];
    toRemove?: string[];
    toUpdate?: MemberMsgForString[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaGroupClient extends ArenaGroupQueryClient implements ArenaGroupInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.updateMembers = this.updateMembers.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  updateMembers = async ({
    toAdd,
    toRemove,
    toUpdate
  }: {
    toAdd?: AddMemberMsg[];
    toRemove?: string[];
    toUpdate?: MemberMsgForString[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_members: {
        to_add: toAdd,
        to_remove: toRemove,
        to_update: toUpdate
      }
    }, fee_, memo_, funds_);
  };
  updateOwnership = async (action: Action, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee_, memo_, funds_);
  };
}