/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, Empty, ExecuteMsg, Binary, Decimal, Uint128, Expiration, Timestamp, Uint64, ModuleInfo, Admin, EliminationType, ExecuteExt, MatchResult, Action, ProposeMessage, FeeInformationForString, DistributionForString, MemberPercentageForString, EscrowInstantiateInfo, ModuleInstantiateInfo, TournamentInstantiateExt, MatchResultMsg, QueryMsg, CompetitionsFilter, CompetitionStatus, QueryExt, MigrateMsg, Addr, SudoMsg, Match, Null, CompetitionResponseForTournamentExt, TournamentExt, FeeInformationForAddr, ArrayOfCompetitionResponseForTournamentExt, ConfigForEmpty, String, ArrayOfEvidence, Evidence, OwnershipForString, NullableDistributionForString } from "./ArenaTournamentModule.types";
import { ArenaTournamentModuleQueryClient } from "./ArenaTournamentModule.client";
export interface ArenaTournamentModuleReactQuery<TResponse, TData = TResponse> {
  client: ArenaTournamentModuleQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaTournamentModuleOwnershipQuery<TData> extends ArenaTournamentModuleReactQuery<OwnershipForString, TData> {}
export function useArenaTournamentModuleOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaTournamentModuleOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(["arenaTournamentModuleOwnership", client.contractAddress], () => client.ownership(), options);
}
export interface ArenaTournamentModuleQueryExtensionQuery<TData> extends ArenaTournamentModuleReactQuery<Binary, TData> {
  args: {
    msg: QueryExt;
  };
}
export function useArenaTournamentModuleQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: ArenaTournamentModuleQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(["arenaTournamentModuleQueryExtension", client.contractAddress, JSON.stringify(args)], () => client.queryExtension({
    msg: args.msg
  }), options);
}
export interface ArenaTournamentModuleResultQuery<TData> extends ArenaTournamentModuleReactQuery<NullableDistributionForString, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaTournamentModuleResultQuery<TData = NullableDistributionForString>({
  client,
  args,
  options
}: ArenaTournamentModuleResultQuery<TData>) {
  return useQuery<NullableDistributionForString, Error, TData>(["arenaTournamentModuleResult", client.contractAddress, JSON.stringify(args)], () => client.result({
    competitionId: args.competitionId
  }), options);
}
export interface ArenaTournamentModuleEvidenceQuery<TData> extends ArenaTournamentModuleReactQuery<ArrayOfEvidence, TData> {
  args: {
    competitionId: Uint128;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaTournamentModuleEvidenceQuery<TData = ArrayOfEvidence>({
  client,
  args,
  options
}: ArenaTournamentModuleEvidenceQuery<TData>) {
  return useQuery<ArrayOfEvidence, Error, TData>(["arenaTournamentModuleEvidence", client.contractAddress, JSON.stringify(args)], () => client.evidence({
    competitionId: args.competitionId,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaTournamentModuleCompetitionsQuery<TData> extends ArenaTournamentModuleReactQuery<ArrayOfCompetitionResponseForTournamentExt, TData> {
  args: {
    filter?: CompetitionsFilter;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaTournamentModuleCompetitionsQuery<TData = ArrayOfCompetitionResponseForTournamentExt>({
  client,
  args,
  options
}: ArenaTournamentModuleCompetitionsQuery<TData>) {
  return useQuery<ArrayOfCompetitionResponseForTournamentExt, Error, TData>(["arenaTournamentModuleCompetitions", client.contractAddress, JSON.stringify(args)], () => client.competitions({
    filter: args.filter,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaTournamentModuleCompetitionQuery<TData> extends ArenaTournamentModuleReactQuery<CompetitionResponseForTournamentExt, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaTournamentModuleCompetitionQuery<TData = CompetitionResponseForTournamentExt>({
  client,
  args,
  options
}: ArenaTournamentModuleCompetitionQuery<TData>) {
  return useQuery<CompetitionResponseForTournamentExt, Error, TData>(["arenaTournamentModuleCompetition", client.contractAddress, JSON.stringify(args)], () => client.competition({
    competitionId: args.competitionId
  }), options);
}
export interface ArenaTournamentModuleCompetitionCountQuery<TData> extends ArenaTournamentModuleReactQuery<Uint128, TData> {}
export function useArenaTournamentModuleCompetitionCountQuery<TData = Uint128>({
  client,
  options
}: ArenaTournamentModuleCompetitionCountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["arenaTournamentModuleCompetitionCount", client.contractAddress], () => client.competitionCount(), options);
}
export interface ArenaTournamentModuleDAOQuery<TData> extends ArenaTournamentModuleReactQuery<String, TData> {}
export function useArenaTournamentModuleDAOQuery<TData = String>({
  client,
  options
}: ArenaTournamentModuleDAOQuery<TData>) {
  return useQuery<String, Error, TData>(["arenaTournamentModuleDAO", client.contractAddress], () => client.dAO(), options);
}
export interface ArenaTournamentModuleConfigQuery<TData> extends ArenaTournamentModuleReactQuery<ConfigForEmpty, TData> {}
export function useArenaTournamentModuleConfigQuery<TData = ConfigForEmpty>({
  client,
  options
}: ArenaTournamentModuleConfigQuery<TData>) {
  return useQuery<ConfigForEmpty, Error, TData>(["arenaTournamentModuleConfig", client.contractAddress], () => client.config(), options);
}