/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Uint64, Action, Expiration, Timestamp, DiscordProfile, DiscordConnection, QueryMsg, MigrateMsg, Addr, ArrayOfAddr, ArrayOfDiscordConnection, NullableDiscordProfile, OwnershipForString } from "./ArenaDiscordIdentity.types";
import { ArenaDiscordIdentityQueryClient, ArenaDiscordIdentityClient } from "./ArenaDiscordIdentity.client";
export const arenaDiscordIdentityQueryKeys = {
  contract: ([{
    contract: "arenaDiscordIdentity"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...arenaDiscordIdentityQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  discordProfile: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "discord_profile",
    args
  }] as const),
  connectedWallets: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "connected_wallets",
    args
  }] as const),
  discordConnections: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "discord_connections",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const arenaDiscordIdentityQueries = {
  discordProfile: <TData = NullableDiscordProfile,>({
    client,
    args,
    options
  }: ArenaDiscordIdentityDiscordProfileQuery<TData>): UseQueryOptions<NullableDiscordProfile, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.discordProfile(client?.contractAddress, args),
    queryFn: () => client ? client.discordProfile({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  connectedWallets: <TData = ArrayOfAddr,>({
    client,
    args,
    options
  }: ArenaDiscordIdentityConnectedWalletsQuery<TData>): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.connectedWallets(client?.contractAddress, args),
    queryFn: () => client ? client.connectedWallets({
      discordId: args.discordId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  discordConnections: <TData = ArrayOfDiscordConnection,>({
    client,
    args,
    options
  }: ArenaDiscordIdentityDiscordConnectionsQuery<TData>): UseQueryOptions<ArrayOfDiscordConnection, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.discordConnections(client?.contractAddress, args),
    queryFn: () => client ? client.discordConnections({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: ArenaDiscordIdentityOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ArenaDiscordIdentityReactQuery<TResponse, TData = TResponse> {
  client: ArenaDiscordIdentityQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaDiscordIdentityOwnershipQuery<TData> extends ArenaDiscordIdentityReactQuery<OwnershipForString, TData> {}
export function useArenaDiscordIdentityOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaDiscordIdentityOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(arenaDiscordIdentityQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityDiscordConnectionsQuery<TData> extends ArenaDiscordIdentityReactQuery<ArrayOfDiscordConnection, TData> {
  args: {
    addr: string;
  };
}
export function useArenaDiscordIdentityDiscordConnectionsQuery<TData = ArrayOfDiscordConnection>({
  client,
  args,
  options
}: ArenaDiscordIdentityDiscordConnectionsQuery<TData>) {
  return useQuery<ArrayOfDiscordConnection, Error, TData>(arenaDiscordIdentityQueryKeys.discordConnections(client?.contractAddress, args), () => client ? client.discordConnections({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityConnectedWalletsQuery<TData> extends ArenaDiscordIdentityReactQuery<ArrayOfAddr, TData> {
  args: {
    discordId: Uint64;
  };
}
export function useArenaDiscordIdentityConnectedWalletsQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: ArenaDiscordIdentityConnectedWalletsQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(arenaDiscordIdentityQueryKeys.connectedWallets(client?.contractAddress, args), () => client ? client.connectedWallets({
    discordId: args.discordId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityDiscordProfileQuery<TData> extends ArenaDiscordIdentityReactQuery<NullableDiscordProfile, TData> {
  args: {
    addr: string;
  };
}
export function useArenaDiscordIdentityDiscordProfileQuery<TData = NullableDiscordProfile>({
  client,
  args,
  options
}: ArenaDiscordIdentityDiscordProfileQuery<TData>) {
  return useQuery<NullableDiscordProfile, Error, TData>(arenaDiscordIdentityQueryKeys.discordProfile(client?.contractAddress, args), () => client ? client.discordProfile({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityUpdateOwnershipMutation {
  client: ArenaDiscordIdentityClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentityUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentityUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentityUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ArenaDiscordIdentityWithdrawMutation {
  client: ArenaDiscordIdentityClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentityWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentityWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentityWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface ArenaDiscordIdentityRemoveProfileMutation {
  client: ArenaDiscordIdentityClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentityRemoveProfileMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentityRemoveProfileMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentityRemoveProfileMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeProfile(fee, memo, funds), options);
}
export interface ArenaDiscordIdentitySetFaucetAmountMutation {
  client: ArenaDiscordIdentityClient;
  msg: {
    amount: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentitySetFaucetAmountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentitySetFaucetAmountMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentitySetFaucetAmountMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setFaucetAmount(msg, fee, memo, funds), options);
}
export interface ArenaDiscordIdentitySetConnectionsMutation {
  client: ArenaDiscordIdentityClient;
  msg: {
    connections: DiscordConnection[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentitySetConnectionsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentitySetConnectionsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentitySetConnectionsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setConnections(msg, fee, memo, funds), options);
}
export interface ArenaDiscordIdentitySetProfileMutation {
  client: ArenaDiscordIdentityClient;
  msg: {
    addr: string;
    discordProfile: DiscordProfile;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentitySetProfileMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentitySetProfileMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentitySetProfileMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setProfile(msg, fee, memo, funds), options);
}