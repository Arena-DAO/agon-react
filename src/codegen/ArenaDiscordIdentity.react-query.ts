/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Uint64, Action, Expiration, Timestamp, QueryMsg, MigrateMsg, OwnershipForString, NullableUint64 } from "./ArenaDiscordIdentity.types";
import { ArenaDiscordIdentityQueryClient, ArenaDiscordIdentityClient } from "./ArenaDiscordIdentity.client";
export const arenaDiscordIdentityQueryKeys = {
  contract: ([{
    contract: "arenaDiscordIdentity"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...arenaDiscordIdentityQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  userId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "user_id",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...arenaDiscordIdentityQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const arenaDiscordIdentityQueries = {
  userId: <TData = NullableUint64,>({
    client,
    args,
    options
  }: ArenaDiscordIdentityUserIdQuery<TData>): UseQueryOptions<NullableUint64, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.userId(client?.contractAddress, args),
    queryFn: () => client ? client.userId({
      addr: args.addr
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForString,>({
    client,
    options
  }: ArenaDiscordIdentityOwnershipQuery<TData>): UseQueryOptions<OwnershipForString, Error, TData> => ({
    queryKey: arenaDiscordIdentityQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface ArenaDiscordIdentityReactQuery<TResponse, TData = TResponse> {
  client: ArenaDiscordIdentityQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaDiscordIdentityOwnershipQuery<TData> extends ArenaDiscordIdentityReactQuery<OwnershipForString, TData> {}
export function useArenaDiscordIdentityOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaDiscordIdentityOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(arenaDiscordIdentityQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityUserIdQuery<TData> extends ArenaDiscordIdentityReactQuery<NullableUint64, TData> {
  args: {
    addr: string;
  };
}
export function useArenaDiscordIdentityUserIdQuery<TData = NullableUint64>({
  client,
  args,
  options
}: ArenaDiscordIdentityUserIdQuery<TData>) {
  return useQuery<NullableUint64, Error, TData>(arenaDiscordIdentityQueryKeys.userId(client?.contractAddress, args), () => client ? client.userId({
    addr: args.addr
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface ArenaDiscordIdentityUpdateOwnershipMutation {
  client: ArenaDiscordIdentityClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentityUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentityUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentityUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface ArenaDiscordIdentityWithdrawMutation {
  client: ArenaDiscordIdentityClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentityWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentityWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentityWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface ArenaDiscordIdentitySetFaucetAmountMutation {
  client: ArenaDiscordIdentityClient;
  msg: {
    amount: Coin;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentitySetFaucetAmountMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentitySetFaucetAmountMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentitySetFaucetAmountMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setFaucetAmount(msg, fee, memo, funds), options);
}
export interface ArenaDiscordIdentitySetProfileMutation {
  client: ArenaDiscordIdentityClient;
  msg: {
    addr: string;
    userId: Uint64;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useArenaDiscordIdentitySetProfileMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, ArenaDiscordIdentitySetProfileMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, ArenaDiscordIdentitySetProfileMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setProfile(msg, fee, memo, funds), options);
}