/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Decimal, DistributionForString, MemberPercentageForString, QueryMsg, MigrateMsg, NullableDistributionForString } from "./ArenaPaymentRegistry.types";
export interface ArenaPaymentRegistryReadOnlyInterface {
  contractAddress: string;
  getDistribution: ({
    addr,
    height
  }: {
    addr: string;
    height?: number;
  }) => Promise<NullableDistributionForString>;
}
export class ArenaPaymentRegistryQueryClient implements ArenaPaymentRegistryReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getDistribution = this.getDistribution.bind(this);
  }
  getDistribution = async ({
    addr,
    height
  }: {
    addr: string;
    height?: number;
  }): Promise<NullableDistributionForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_distribution: {
        addr,
        height
      }
    });
  };
}
export interface ArenaPaymentRegistryInterface extends ArenaPaymentRegistryReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setDistribution: ({
    distribution
  }: {
    distribution: DistributionForString;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setDistributionRemainderSelf: ({
    memberPercentages
  }: {
    memberPercentages: MemberPercentageForString[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeDistribution: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaPaymentRegistryClient extends ArenaPaymentRegistryQueryClient implements ArenaPaymentRegistryInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setDistribution = this.setDistribution.bind(this);
    this.setDistributionRemainderSelf = this.setDistributionRemainderSelf.bind(this);
    this.removeDistribution = this.removeDistribution.bind(this);
  }
  setDistribution = async ({
    distribution
  }: {
    distribution: DistributionForString;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_distribution: {
        distribution
      }
    }, fee_, memo_, funds_);
  };
  setDistributionRemainderSelf = async ({
    memberPercentages
  }: {
    memberPercentages: MemberPercentageForString[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_distribution_remainder_self: {
        member_percentages: memberPercentages
      }
    }, fee_, memo_, funds_);
  };
  removeDistribution = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_distribution: {}
    }, fee_, memo_, funds_);
  };
}