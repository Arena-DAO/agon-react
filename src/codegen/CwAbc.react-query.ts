/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { CurveType, Uint128, HatcherAllowlistConfigType, Uint64, Decimal, InstantiateMsg, HatcherAllowlistEntryMsg, HatcherAllowlistConfigMsg, MinMax, CommonsPhaseConfig, ClosedConfig, HatchConfig, OpenConfig, ReserveToken, SupplyToken, NewDenomMetadata, DenomUnit, ExecuteMsg, UpdatePhaseConfigMsg, Action, Expiration, Timestamp, QueryMsg, QuoteResponse, CurveInfoResponse, DenomResponse, Addr, DonationsResponse, NullableAddr, HatcherAllowlistResponse, HatcherAllowlistEntry, HatcherAllowlistConfig, HatchersResponse, Boolean, OwnershipForString, CommonsPhase, CommonsPhaseConfigResponse } from "./CwAbc.types";
import { CwAbcQueryClient } from "./CwAbc.client";
export interface CwAbcReactQuery<TResponse, TData = TResponse> {
  client: CwAbcQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwAbcOwnershipQuery<TData> extends CwAbcReactQuery<OwnershipForString, TData> {}
export function useCwAbcOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: CwAbcOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(["cwAbcOwnership", client.contractAddress], () => client.ownership(), options);
}
export interface CwAbcTokenContractQuery<TData> extends CwAbcReactQuery<Addr, TData> {}
export function useCwAbcTokenContractQuery<TData = Addr>({
  client,
  options
}: CwAbcTokenContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(["cwAbcTokenContract", client.contractAddress], () => client.tokenContract(), options);
}
export interface CwAbcPhaseConfigQuery<TData> extends CwAbcReactQuery<CommonsPhaseConfigResponse, TData> {}
export function useCwAbcPhaseConfigQuery<TData = CommonsPhaseConfigResponse>({
  client,
  options
}: CwAbcPhaseConfigQuery<TData>) {
  return useQuery<CommonsPhaseConfigResponse, Error, TData>(["cwAbcPhaseConfig", client.contractAddress], () => client.phaseConfig(), options);
}
export interface CwAbcPhaseQuery<TData> extends CwAbcReactQuery<CommonsPhase, TData> {}
export function useCwAbcPhaseQuery<TData = CommonsPhase>({
  client,
  options
}: CwAbcPhaseQuery<TData>) {
  return useQuery<CommonsPhase, Error, TData>(["cwAbcPhase", client.contractAddress], () => client.phase(), options);
}
export interface CwAbcSellQuoteQuery<TData> extends CwAbcReactQuery<QuoteResponse, TData> {
  args: {
    payment: Uint128;
  };
}
export function useCwAbcSellQuoteQuery<TData = QuoteResponse>({
  client,
  args,
  options
}: CwAbcSellQuoteQuery<TData>) {
  return useQuery<QuoteResponse, Error, TData>(["cwAbcSellQuote", client.contractAddress, JSON.stringify(args)], () => client.sellQuote({
    payment: args.payment
  }), options);
}
export interface CwAbcBuyQuoteQuery<TData> extends CwAbcReactQuery<QuoteResponse, TData> {
  args: {
    payment: Uint128;
  };
}
export function useCwAbcBuyQuoteQuery<TData = QuoteResponse>({
  client,
  args,
  options
}: CwAbcBuyQuoteQuery<TData>) {
  return useQuery<QuoteResponse, Error, TData>(["cwAbcBuyQuote", client.contractAddress, JSON.stringify(args)], () => client.buyQuote({
    payment: args.payment
  }), options);
}
export interface CwAbcMaxSupplyQuery<TData> extends CwAbcReactQuery<Uint128, TData> {}
export function useCwAbcMaxSupplyQuery<TData = Uint128>({
  client,
  options
}: CwAbcMaxSupplyQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["cwAbcMaxSupply", client.contractAddress], () => client.maxSupply(), options);
}
export interface CwAbcHatcherAllowlistQuery<TData> extends CwAbcReactQuery<HatcherAllowlistResponse, TData> {
  args: {
    configType?: HatcherAllowlistConfigType;
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcHatcherAllowlistQuery<TData = HatcherAllowlistResponse>({
  client,
  args,
  options
}: CwAbcHatcherAllowlistQuery<TData>) {
  return useQuery<HatcherAllowlistResponse, Error, TData>(["cwAbcHatcherAllowlist", client.contractAddress, JSON.stringify(args)], () => client.hatcherAllowlist({
    configType: args.configType,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface CwAbcHatcherQuery<TData> extends CwAbcReactQuery<Uint128, TData> {
  args: {
    addr: string;
  };
}
export function useCwAbcHatcherQuery<TData = Uint128>({
  client,
  args,
  options
}: CwAbcHatcherQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["cwAbcHatcher", client.contractAddress, JSON.stringify(args)], () => client.hatcher({
    addr: args.addr
  }), options);
}
export interface CwAbcHatchersQuery<TData> extends CwAbcReactQuery<HatchersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcHatchersQuery<TData = HatchersResponse>({
  client,
  args,
  options
}: CwAbcHatchersQuery<TData>) {
  return useQuery<HatchersResponse, Error, TData>(["cwAbcHatchers", client.contractAddress, JSON.stringify(args)], () => client.hatchers({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface CwAbcFundingPoolForwardingQuery<TData> extends CwAbcReactQuery<NullableAddr, TData> {}
export function useCwAbcFundingPoolForwardingQuery<TData = NullableAddr>({
  client,
  options
}: CwAbcFundingPoolForwardingQuery<TData>) {
  return useQuery<NullableAddr, Error, TData>(["cwAbcFundingPoolForwarding", client.contractAddress], () => client.fundingPoolForwarding(), options);
}
export interface CwAbcIsPausedQuery<TData> extends CwAbcReactQuery<Boolean, TData> {}
export function useCwAbcIsPausedQuery<TData = Boolean>({
  client,
  options
}: CwAbcIsPausedQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["cwAbcIsPaused", client.contractAddress], () => client.isPaused(), options);
}
export interface CwAbcDonationsQuery<TData> extends CwAbcReactQuery<DonationsResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwAbcDonationsQuery<TData = DonationsResponse>({
  client,
  args,
  options
}: CwAbcDonationsQuery<TData>) {
  return useQuery<DonationsResponse, Error, TData>(["cwAbcDonations", client.contractAddress, JSON.stringify(args)], () => client.donations({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface CwAbcDenomQuery<TData> extends CwAbcReactQuery<DenomResponse, TData> {}
export function useCwAbcDenomQuery<TData = DenomResponse>({
  client,
  options
}: CwAbcDenomQuery<TData>) {
  return useQuery<DenomResponse, Error, TData>(["cwAbcDenom", client.contractAddress], () => client.denom(), options);
}
export interface CwAbcCurveTypeQuery<TData> extends CwAbcReactQuery<CurveType, TData> {}
export function useCwAbcCurveTypeQuery<TData = CurveType>({
  client,
  options
}: CwAbcCurveTypeQuery<TData>) {
  return useQuery<CurveType, Error, TData>(["cwAbcCurveType", client.contractAddress], () => client.curveType(), options);
}
export interface CwAbcCurveInfoQuery<TData> extends CwAbcReactQuery<CurveInfoResponse, TData> {}
export function useCwAbcCurveInfoQuery<TData = CurveInfoResponse>({
  client,
  options
}: CwAbcCurveInfoQuery<TData>) {
  return useQuery<CurveInfoResponse, Error, TData>(["cwAbcCurveInfo", client.contractAddress], () => client.curveInfo(), options);
}