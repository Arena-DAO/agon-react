/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.11.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Uint64, Action, Expiration, Timestamp, QueryMsg, MigrateMsg, OwnershipForString, NullableUint64 } from "./ArenaDiscordIdentity.types";
export interface ArenaDiscordIdentityReadOnlyInterface {
  contractAddress: string;
  userId: ({
    addr
  }: {
    addr: string;
  }) => Promise<NullableUint64>;
  ownership: () => Promise<OwnershipForString>;
}
export class ArenaDiscordIdentityQueryClient implements ArenaDiscordIdentityReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.userId = this.userId.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  userId = async ({
    addr
  }: {
    addr: string;
  }): Promise<NullableUint64> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_id: {
        addr
      }
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ArenaDiscordIdentityInterface extends ArenaDiscordIdentityReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setProfile: ({
    addr,
    userId
  }: {
    addr: string;
    userId: Uint64;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  setFaucetAmount: ({
    amount
  }: {
    amount: Coin;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaDiscordIdentityClient extends ArenaDiscordIdentityQueryClient implements ArenaDiscordIdentityInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setProfile = this.setProfile.bind(this);
    this.setFaucetAmount = this.setFaucetAmount.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  setProfile = async ({
    addr,
    userId
  }: {
    addr: string;
    userId: Uint64;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_profile: {
        addr,
        user_id: userId
      }
    }, fee, memo, _funds);
  };
  setFaucetAmount = async ({
    amount
  }: {
    amount: Coin;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_faucet_amount: {
        amount
      }
    }, fee, memo, _funds);
  };
  withdraw = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee, memo, _funds);
  };
  updateOwnership = async (action: Action, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee, memo, _funds);
  };
}