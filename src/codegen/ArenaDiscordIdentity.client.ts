/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, InstantiateMsg, Coin, ExecuteMsg, Uint64, Action, Expiration, Timestamp, DiscordProfile, DiscordConnection, QueryMsg, MigrateMsg, Addr, ArrayOfAddr, ArrayOfDiscordConnection, NullableDiscordProfile, OwnershipForString } from "./ArenaDiscordIdentity.types";
export interface ArenaDiscordIdentityReadOnlyInterface {
  contractAddress: string;
  discordProfile: ({
    addr
  }: {
    addr: string;
  }) => Promise<NullableDiscordProfile>;
  connectedWallets: ({
    discordId
  }: {
    discordId: Uint64;
  }) => Promise<ArrayOfAddr>;
  discordConnections: ({
    addr
  }: {
    addr: string;
  }) => Promise<ArrayOfDiscordConnection>;
  userCount: () => Promise<Uint128>;
  ownership: () => Promise<OwnershipForString>;
}
export class ArenaDiscordIdentityQueryClient implements ArenaDiscordIdentityReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.discordProfile = this.discordProfile.bind(this);
    this.connectedWallets = this.connectedWallets.bind(this);
    this.discordConnections = this.discordConnections.bind(this);
    this.userCount = this.userCount.bind(this);
    this.ownership = this.ownership.bind(this);
  }
  discordProfile = async ({
    addr
  }: {
    addr: string;
  }): Promise<NullableDiscordProfile> => {
    return this.client.queryContractSmart(this.contractAddress, {
      discord_profile: {
        addr
      }
    });
  };
  connectedWallets = async ({
    discordId
  }: {
    discordId: Uint64;
  }): Promise<ArrayOfAddr> => {
    return this.client.queryContractSmart(this.contractAddress, {
      connected_wallets: {
        discord_id: discordId
      }
    });
  };
  discordConnections = async ({
    addr
  }: {
    addr: string;
  }): Promise<ArrayOfDiscordConnection> => {
    return this.client.queryContractSmart(this.contractAddress, {
      discord_connections: {
        addr
      }
    });
  };
  userCount = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_count: {}
    });
  };
  ownership = async (): Promise<OwnershipForString> => {
    return this.client.queryContractSmart(this.contractAddress, {
      ownership: {}
    });
  };
}
export interface ArenaDiscordIdentityInterface extends ArenaDiscordIdentityReadOnlyInterface {
  contractAddress: string;
  sender: string;
  setProfile: ({
    addr,
    discordProfile
  }: {
    addr: string;
    discordProfile: DiscordProfile;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setConnections: ({
    connections
  }: {
    connections: DiscordConnection[];
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  setFaucetAmount: ({
    amount
  }: {
    amount: Coin;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  removeProfile: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  withdraw: (fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  updateOwnership: (action: Action, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ArenaDiscordIdentityClient extends ArenaDiscordIdentityQueryClient implements ArenaDiscordIdentityInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.setProfile = this.setProfile.bind(this);
    this.setConnections = this.setConnections.bind(this);
    this.setFaucetAmount = this.setFaucetAmount.bind(this);
    this.removeProfile = this.removeProfile.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.updateOwnership = this.updateOwnership.bind(this);
  }
  setProfile = async ({
    addr,
    discordProfile
  }: {
    addr: string;
    discordProfile: DiscordProfile;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_profile: {
        addr,
        discord_profile: discordProfile
      }
    }, fee_, memo_, funds_);
  };
  setConnections = async ({
    connections
  }: {
    connections: DiscordConnection[];
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_connections: {
        connections
      }
    }, fee_, memo_, funds_);
  };
  setFaucetAmount = async ({
    amount
  }: {
    amount: Coin;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      set_faucet_amount: {
        amount
      }
    }, fee_, memo_, funds_);
  };
  removeProfile = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_profile: {}
    }, fee_, memo_, funds_);
  };
  withdraw = async (fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {}
    }, fee_, memo_, funds_);
  };
  updateOwnership = async (action: Action, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_ownership: action
    }, fee_, memo_, funds_);
  };
}