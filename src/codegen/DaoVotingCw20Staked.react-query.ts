/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { ActiveThreshold, Uint128, Decimal, TokenInfo, StakingInfo, Duration, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, ExecuteMsg, QueryMsg, MigrateMsg, ActiveThresholdResponse, Addr, InfoResponse, ContractVersion, Boolean, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingCw20Staked.types";
import { DaoVotingCw20StakedQueryClient } from "./DaoVotingCw20Staked.client";
export interface DaoVotingCw20StakedReactQuery<TResponse, TData = TResponse> {
  client: DaoVotingCw20StakedQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoVotingCw20StakedIsActiveQuery<TData> extends DaoVotingCw20StakedReactQuery<Boolean, TData> {}
export function useDaoVotingCw20StakedIsActiveQuery<TData = Boolean>({
  client,
  options
}: DaoVotingCw20StakedIsActiveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["daoVotingCw20StakedIsActive", client.contractAddress], () => client.isActive(), options);
}
export interface DaoVotingCw20StakedTokenContractQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedTokenContractQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedTokenContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoVotingCw20StakedTokenContract", client.contractAddress], () => client.tokenContract(), options);
}
export interface DaoVotingCw20StakedInfoQuery<TData> extends DaoVotingCw20StakedReactQuery<InfoResponse, TData> {}
export function useDaoVotingCw20StakedInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoVotingCw20StakedInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["daoVotingCw20StakedInfo", client.contractAddress], () => client.info(), options);
}
export interface DaoVotingCw20StakedDaoQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedDaoQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoVotingCw20StakedDao", client.contractAddress], () => client.dao(), options);
}
export interface DaoVotingCw20StakedTotalPowerAtHeightQuery<TData> extends DaoVotingCw20StakedReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoVotingCw20StakedTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw20StakedTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(["daoVotingCw20StakedTotalPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.totalPowerAtHeight({
    height: args.height
  }), options);
}
export interface DaoVotingCw20StakedVotingPowerAtHeightQuery<TData> extends DaoVotingCw20StakedReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoVotingCw20StakedVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw20StakedVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(["daoVotingCw20StakedVotingPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }), options);
}
export interface DaoVotingCw20StakedActiveThresholdQuery<TData> extends DaoVotingCw20StakedReactQuery<ActiveThresholdResponse, TData> {}
export function useDaoVotingCw20StakedActiveThresholdQuery<TData = ActiveThresholdResponse>({
  client,
  options
}: DaoVotingCw20StakedActiveThresholdQuery<TData>) {
  return useQuery<ActiveThresholdResponse, Error, TData>(["daoVotingCw20StakedActiveThreshold", client.contractAddress], () => client.activeThreshold(), options);
}
export interface DaoVotingCw20StakedStakingContractQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedStakingContractQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedStakingContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoVotingCw20StakedStakingContract", client.contractAddress], () => client.stakingContract(), options);
}