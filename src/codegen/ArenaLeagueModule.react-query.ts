/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, Empty, ExecuteMsg, Binary, Decimal, Uint128, Expiration, Timestamp, Uint64, ModuleInfo, Admin, ExecuteExt, Result, Int128, Action, ProposeMessage, FeeInformationForString, DistributionForString, MemberPercentageForString, EscrowInstantiateInfo, ModuleInstantiateInfo, CompetitionInstantiateExt, MatchResult, PointAdjustment, QueryMsg, CompetitionsFilter, CompetitionStatus, QueryExt, MigrateMsg, Addr, SudoMsg, MemberPoints, RoundResponse, Match, Null, CompetitionResponseForCompetitionExt, CompetitionExt, FeeInformationForAddr, ArrayOfCompetitionResponseForCompetitionExt, ConfigForEmpty, String, ArrayOfEvidence, Evidence, OwnershipForString, NullableDistributionForString } from "./ArenaLeagueModule.types";
import { ArenaLeagueModuleQueryClient } from "./ArenaLeagueModule.client";
export interface ArenaLeagueModuleReactQuery<TResponse, TData = TResponse> {
  client: ArenaLeagueModuleQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface ArenaLeagueModuleOwnershipQuery<TData> extends ArenaLeagueModuleReactQuery<OwnershipForString, TData> {}
export function useArenaLeagueModuleOwnershipQuery<TData = OwnershipForString>({
  client,
  options
}: ArenaLeagueModuleOwnershipQuery<TData>) {
  return useQuery<OwnershipForString, Error, TData>(["arenaLeagueModuleOwnership", client.contractAddress], () => client.ownership(), options);
}
export interface ArenaLeagueModuleQueryExtensionQuery<TData> extends ArenaLeagueModuleReactQuery<Binary, TData> {
  args: {
    msg: QueryExt;
  };
}
export function useArenaLeagueModuleQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: ArenaLeagueModuleQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(["arenaLeagueModuleQueryExtension", client.contractAddress, JSON.stringify(args)], () => client.queryExtension({
    msg: args.msg
  }), options);
}
export interface ArenaLeagueModuleResultQuery<TData> extends ArenaLeagueModuleReactQuery<NullableDistributionForString, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaLeagueModuleResultQuery<TData = NullableDistributionForString>({
  client,
  args,
  options
}: ArenaLeagueModuleResultQuery<TData>) {
  return useQuery<NullableDistributionForString, Error, TData>(["arenaLeagueModuleResult", client.contractAddress, JSON.stringify(args)], () => client.result({
    competitionId: args.competitionId
  }), options);
}
export interface ArenaLeagueModuleEvidenceQuery<TData> extends ArenaLeagueModuleReactQuery<ArrayOfEvidence, TData> {
  args: {
    competitionId: Uint128;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaLeagueModuleEvidenceQuery<TData = ArrayOfEvidence>({
  client,
  args,
  options
}: ArenaLeagueModuleEvidenceQuery<TData>) {
  return useQuery<ArrayOfEvidence, Error, TData>(["arenaLeagueModuleEvidence", client.contractAddress, JSON.stringify(args)], () => client.evidence({
    competitionId: args.competitionId,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaLeagueModuleCompetitionsQuery<TData> extends ArenaLeagueModuleReactQuery<ArrayOfCompetitionResponseForCompetitionExt, TData> {
  args: {
    filter?: CompetitionsFilter;
    limit?: number;
    startAfter?: Uint128;
  };
}
export function useArenaLeagueModuleCompetitionsQuery<TData = ArrayOfCompetitionResponseForCompetitionExt>({
  client,
  args,
  options
}: ArenaLeagueModuleCompetitionsQuery<TData>) {
  return useQuery<ArrayOfCompetitionResponseForCompetitionExt, Error, TData>(["arenaLeagueModuleCompetitions", client.contractAddress, JSON.stringify(args)], () => client.competitions({
    filter: args.filter,
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface ArenaLeagueModuleCompetitionQuery<TData> extends ArenaLeagueModuleReactQuery<CompetitionResponseForCompetitionExt, TData> {
  args: {
    competitionId: Uint128;
  };
}
export function useArenaLeagueModuleCompetitionQuery<TData = CompetitionResponseForCompetitionExt>({
  client,
  args,
  options
}: ArenaLeagueModuleCompetitionQuery<TData>) {
  return useQuery<CompetitionResponseForCompetitionExt, Error, TData>(["arenaLeagueModuleCompetition", client.contractAddress, JSON.stringify(args)], () => client.competition({
    competitionId: args.competitionId
  }), options);
}
export interface ArenaLeagueModuleCompetitionCountQuery<TData> extends ArenaLeagueModuleReactQuery<Uint128, TData> {}
export function useArenaLeagueModuleCompetitionCountQuery<TData = Uint128>({
  client,
  options
}: ArenaLeagueModuleCompetitionCountQuery<TData>) {
  return useQuery<Uint128, Error, TData>(["arenaLeagueModuleCompetitionCount", client.contractAddress], () => client.competitionCount(), options);
}
export interface ArenaLeagueModuleDAOQuery<TData> extends ArenaLeagueModuleReactQuery<String, TData> {}
export function useArenaLeagueModuleDAOQuery<TData = String>({
  client,
  options
}: ArenaLeagueModuleDAOQuery<TData>) {
  return useQuery<String, Error, TData>(["arenaLeagueModuleDAO", client.contractAddress], () => client.dAO(), options);
}
export interface ArenaLeagueModuleConfigQuery<TData> extends ArenaLeagueModuleReactQuery<ConfigForEmpty, TData> {}
export function useArenaLeagueModuleConfigQuery<TData = ConfigForEmpty>({
  client,
  options
}: ArenaLeagueModuleConfigQuery<TData>) {
  return useQuery<ConfigForEmpty, Error, TData>(["arenaLeagueModuleConfig", client.contractAddress], () => client.config(), options);
}