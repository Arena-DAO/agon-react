/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.7.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { ActiveThreshold, Uint128, Decimal, TokenInfo, Binary, Duration, InstantiateMsg, NewTokenInfo, InitialBalance, NewDenomMetadata, DenomUnit, ExecuteMsg, QueryMsg, MigrateMsg, ActiveThresholdResponse, Expiration, Timestamp, Uint64, ClaimsResponse, Claim, Addr, DenomResponse, Config, GetHooksResponse, InfoResponse, ContractVersion, Boolean, ListStakersResponse, StakerBalanceResponse, NullableAddr, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingTokenStaked.types";
import { DaoVotingTokenStakedQueryClient } from "./DaoVotingTokenStaked.client";
export interface DaoVotingTokenStakedReactQuery<TResponse, TData = TResponse> {
  client: DaoVotingTokenStakedQueryClient;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoVotingTokenStakedInfoQuery<TData> extends DaoVotingTokenStakedReactQuery<InfoResponse, TData> {}
export function useDaoVotingTokenStakedInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoVotingTokenStakedInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(["daoVotingTokenStakedInfo", client.contractAddress], () => client.info(), options);
}
export interface DaoVotingTokenStakedDaoQuery<TData> extends DaoVotingTokenStakedReactQuery<Addr, TData> {}
export function useDaoVotingTokenStakedDaoQuery<TData = Addr>({
  client,
  options
}: DaoVotingTokenStakedDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(["daoVotingTokenStakedDao", client.contractAddress], () => client.dao(), options);
}
export interface DaoVotingTokenStakedTotalPowerAtHeightQuery<TData> extends DaoVotingTokenStakedReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoVotingTokenStakedTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingTokenStakedTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(["daoVotingTokenStakedTotalPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.totalPowerAtHeight({
    height: args.height
  }), options);
}
export interface DaoVotingTokenStakedVotingPowerAtHeightQuery<TData> extends DaoVotingTokenStakedReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoVotingTokenStakedVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingTokenStakedVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(["daoVotingTokenStakedVotingPowerAtHeight", client.contractAddress, JSON.stringify(args)], () => client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }), options);
}
export interface DaoVotingTokenStakedIsActiveQuery<TData> extends DaoVotingTokenStakedReactQuery<Boolean, TData> {}
export function useDaoVotingTokenStakedIsActiveQuery<TData = Boolean>({
  client,
  options
}: DaoVotingTokenStakedIsActiveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(["daoVotingTokenStakedIsActive", client.contractAddress], () => client.isActive(), options);
}
export interface DaoVotingTokenStakedDenomQuery<TData> extends DaoVotingTokenStakedReactQuery<DenomResponse, TData> {}
export function useDaoVotingTokenStakedDenomQuery<TData = DenomResponse>({
  client,
  options
}: DaoVotingTokenStakedDenomQuery<TData>) {
  return useQuery<DenomResponse, Error, TData>(["daoVotingTokenStakedDenom", client.contractAddress], () => client.denom(), options);
}
export interface DaoVotingTokenStakedTokenContractQuery<TData> extends DaoVotingTokenStakedReactQuery<NullableAddr, TData> {}
export function useDaoVotingTokenStakedTokenContractQuery<TData = NullableAddr>({
  client,
  options
}: DaoVotingTokenStakedTokenContractQuery<TData>) {
  return useQuery<NullableAddr, Error, TData>(["daoVotingTokenStakedTokenContract", client.contractAddress], () => client.tokenContract(), options);
}
export interface DaoVotingTokenStakedGetHooksQuery<TData> extends DaoVotingTokenStakedReactQuery<GetHooksResponse, TData> {}
export function useDaoVotingTokenStakedGetHooksQuery<TData = GetHooksResponse>({
  client,
  options
}: DaoVotingTokenStakedGetHooksQuery<TData>) {
  return useQuery<GetHooksResponse, Error, TData>(["daoVotingTokenStakedGetHooks", client.contractAddress], () => client.getHooks(), options);
}
export interface DaoVotingTokenStakedActiveThresholdQuery<TData> extends DaoVotingTokenStakedReactQuery<ActiveThresholdResponse, TData> {}
export function useDaoVotingTokenStakedActiveThresholdQuery<TData = ActiveThresholdResponse>({
  client,
  options
}: DaoVotingTokenStakedActiveThresholdQuery<TData>) {
  return useQuery<ActiveThresholdResponse, Error, TData>(["daoVotingTokenStakedActiveThreshold", client.contractAddress], () => client.activeThreshold(), options);
}
export interface DaoVotingTokenStakedListStakersQuery<TData> extends DaoVotingTokenStakedReactQuery<ListStakersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoVotingTokenStakedListStakersQuery<TData = ListStakersResponse>({
  client,
  args,
  options
}: DaoVotingTokenStakedListStakersQuery<TData>) {
  return useQuery<ListStakersResponse, Error, TData>(["daoVotingTokenStakedListStakers", client.contractAddress, JSON.stringify(args)], () => client.listStakers({
    limit: args.limit,
    startAfter: args.startAfter
  }), options);
}
export interface DaoVotingTokenStakedClaimsQuery<TData> extends DaoVotingTokenStakedReactQuery<ClaimsResponse, TData> {
  args: {
    address: string;
  };
}
export function useDaoVotingTokenStakedClaimsQuery<TData = ClaimsResponse>({
  client,
  args,
  options
}: DaoVotingTokenStakedClaimsQuery<TData>) {
  return useQuery<ClaimsResponse, Error, TData>(["daoVotingTokenStakedClaims", client.contractAddress, JSON.stringify(args)], () => client.claims({
    address: args.address
  }), options);
}
export interface DaoVotingTokenStakedGetConfigQuery<TData> extends DaoVotingTokenStakedReactQuery<Config, TData> {}
export function useDaoVotingTokenStakedGetConfigQuery<TData = Config>({
  client,
  options
}: DaoVotingTokenStakedGetConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(["daoVotingTokenStakedGetConfig", client.contractAddress], () => client.getConfig(), options);
}