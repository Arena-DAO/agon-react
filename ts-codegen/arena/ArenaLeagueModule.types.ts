/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.35.3.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {
  description: string;
  extension: Empty;
  key: string;
}
export interface Empty {
  [k: string]: unknown;
}
export type ExecuteMsg = {
  jail_competition: {
    propose_message: ProposeMessage;
  };
} | {
  activate: {};
} | {
  propose_result: {
    propose_message: ProposeMessage;
  };
} | {
  add_competition_hook: {
    id: Uint128;
  };
} | {
  remove_competition_hook: {
    id: Uint128;
  };
} | {
  execute_competition_hook: {
    distribution: MemberShareForString[];
    id: Uint128;
  };
} | {
  create_competition: {
    category_id: Uint128;
    competition_dao: ModuleInstantiateInfo;
    description: string;
    escrow?: ModuleInstantiateInfo | null;
    expiration: Expiration;
    instantiate_extension: CompetitionInstantiateExt;
    name: string;
    rules: string[];
    rulesets: Uint128[];
  };
} | {
  submit_evidence: {
    evidence: string[];
    id: Uint128;
  };
} | {
  process_competition: {
    distribution: MemberShareForString[];
    id: Uint128;
  };
} | {
  extension: {
    msg: ExecuteExt;
  };
} | {
  update_ownership: Action;
};
export type Uint128 = string;
export type Admin = {
  address: {
    addr: string;
  };
} | {
  core_module: {};
};
export type Binary = string;
export type Expiration = {
  at_height: number;
} | {
  at_time: Timestamp;
} | {
  never: {};
};
export type Timestamp = Uint64;
export type Uint64 = string;
export type Duration = {
  height: number;
} | {
  time: number;
};
export type ExecuteExt = {
  process_match: {
    league_id: Uint128;
    match_results: MatchResult[];
    round_number: Uint64;
  };
};
export type Result = "team1" | "team2" | "draw";
export type Action = {
  transfer_ownership: {
    expiry?: Expiration | null;
    new_owner: string;
  };
} | "accept_ownership" | "renounce_ownership";
export interface ProposeMessage {
  description: string;
  distribution: MemberShareForString[];
  id: Uint128;
  title: string;
}
export interface MemberShareForString {
  addr: string;
  shares: Uint128;
}
export interface ModuleInstantiateInfo {
  admin?: Admin | null;
  code_id: number;
  label: string;
  msg: Binary;
}
export interface CompetitionInstantiateExt {
  match_draw_points: Uint128;
  match_lose_points: Uint128;
  match_win_points: Uint128;
  round_duration: Duration;
  teams: string[];
}
export interface MatchResult {
  match_number: Uint128;
  result?: Result | null;
}
export type QueryMsg = {
  config: {};
} | {
  competition_count: {};
} | {
  competition: {
    id: Uint128;
  };
} | {
  competitions: {
    filter?: CompetitionsFilter | null;
    limit?: number | null;
    start_after?: Uint128 | null;
  };
} | {
  query_extension: {
    msg: QueryExt;
  };
} | {
  ownership: {};
};
export type CompetitionsFilter = {
  competition_status: {
    status: CompetitionStatus;
  };
} | {
  category: {
    id: Uint128;
  };
};
export type CompetitionStatus = "pending" | "active" | "inactive" | "jailed";
export type QueryExt = {
  leaderboard: {
    league_id: Uint128;
  };
} | {
  round: {
    league_id: Uint128;
    round_number: Uint64;
  };
};
export type MigrateMsg = {
  from_compatible: {};
};
export type Null = null;
export type Addr = string;
export interface CompetitionResponseForCompetitionExt {
  category_id: Uint128;
  dao: Addr;
  description: string;
  escrow?: Addr | null;
  evidence: Evidence[];
  expiration: Expiration;
  extension: CompetitionExt;
  id: Uint128;
  is_expired: boolean;
  name: string;
  result?: MemberShareForAddr[] | null;
  rules: string[];
  rulesets: Uint128[];
  start_height: number;
  status: CompetitionStatus;
}
export interface Evidence {
  content: string;
  submit_time: Timestamp;
  submit_user: Addr;
}
export interface CompetitionExt {
  match_draw_points: Uint128;
  match_lose_points: Uint128;
  match_win_points: Uint128;
  rounds: Uint64;
}
export interface MemberShareForAddr {
  addr: Addr;
  shares: Uint128;
}
export type ArrayOfCompetitionResponseForCompetitionExt = CompetitionResponseForCompetitionExt[];
export interface Config {
  description: string;
  key: string;
}
export interface OwnershipForString {
  owner?: string | null;
  pending_expiry?: Expiration | null;
  pending_owner?: string | null;
}