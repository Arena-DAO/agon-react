/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Denom, Addr, InstantiateMsg, ExecuteMsg, StakeChangedHookMsg, Uint128, Binary, Action, Expiration, Timestamp, Uint64, Cw20ReceiveMsg, QueryMsg, MigrateMsg, PendingRewardsResponse, InfoResponse, Config, RewardConfig, OwnershipForAddr } from "./Cw20StakeExternalRewards.types";
import { Cw20StakeExternalRewardsQueryClient, Cw20StakeExternalRewardsClient } from "./Cw20StakeExternalRewards.client";
export const cw20StakeExternalRewardsQueryKeys = {
  contract: ([{
    contract: "cw20StakeExternalRewards"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cw20StakeExternalRewardsQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeExternalRewardsQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  getPendingRewards: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeExternalRewardsQueryKeys.address(contractAddress)[0],
    method: "get_pending_rewards",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeExternalRewardsQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const cw20StakeExternalRewardsQueries = {
  info: <TData = InfoResponse,>({
    client,
    options
  }: Cw20StakeExternalRewardsInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: cw20StakeExternalRewardsQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getPendingRewards: <TData = PendingRewardsResponse,>({
    client,
    args,
    options
  }: Cw20StakeExternalRewardsGetPendingRewardsQuery<TData>): UseQueryOptions<PendingRewardsResponse, Error, TData> => ({
    queryKey: cw20StakeExternalRewardsQueryKeys.getPendingRewards(client?.contractAddress, args),
    queryFn: () => client ? client.getPendingRewards({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForAddr,>({
    client,
    options
  }: Cw20StakeExternalRewardsOwnershipQuery<TData>): UseQueryOptions<OwnershipForAddr, Error, TData> => ({
    queryKey: cw20StakeExternalRewardsQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface Cw20StakeExternalRewardsReactQuery<TResponse, TData = TResponse> {
  client: Cw20StakeExternalRewardsQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20StakeExternalRewardsOwnershipQuery<TData> extends Cw20StakeExternalRewardsReactQuery<OwnershipForAddr, TData> {}
export function useCw20StakeExternalRewardsOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options
}: Cw20StakeExternalRewardsOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(cw20StakeExternalRewardsQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeExternalRewardsGetPendingRewardsQuery<TData> extends Cw20StakeExternalRewardsReactQuery<PendingRewardsResponse, TData> {
  args: {
    address: string;
  };
}
export function useCw20StakeExternalRewardsGetPendingRewardsQuery<TData = PendingRewardsResponse>({
  client,
  args,
  options
}: Cw20StakeExternalRewardsGetPendingRewardsQuery<TData>) {
  return useQuery<PendingRewardsResponse, Error, TData>(cw20StakeExternalRewardsQueryKeys.getPendingRewards(client?.contractAddress, args), () => client ? client.getPendingRewards({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeExternalRewardsInfoQuery<TData> extends Cw20StakeExternalRewardsReactQuery<InfoResponse, TData> {}
export function useCw20StakeExternalRewardsInfoQuery<TData = InfoResponse>({
  client,
  options
}: Cw20StakeExternalRewardsInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(cw20StakeExternalRewardsQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeExternalRewardsUpdateOwnershipMutation {
  client: Cw20StakeExternalRewardsClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface Cw20StakeExternalRewardsUpdateRewardDurationMutation {
  client: Cw20StakeExternalRewardsClient;
  msg: {
    newDuration: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsUpdateRewardDurationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsUpdateRewardDurationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsUpdateRewardDurationMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateRewardDuration(msg, fee, memo, funds), options);
}
export interface Cw20StakeExternalRewardsFundMutation {
  client: Cw20StakeExternalRewardsClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsFundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsFundMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsFundMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.fund(fee, memo, funds), options);
}
export interface Cw20StakeExternalRewardsReceiveMutation {
  client: Cw20StakeExternalRewardsClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface Cw20StakeExternalRewardsClaimMutation {
  client: Cw20StakeExternalRewardsClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface Cw20StakeExternalRewardsStakeChangeHookMutation {
  client: Cw20StakeExternalRewardsClient;
  msg: StakeChangedHookMsg;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeExternalRewardsStakeChangeHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeExternalRewardsStakeChangeHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeExternalRewardsStakeChangeHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stakeChangeHook(msg, fee, memo, funds), options);
}