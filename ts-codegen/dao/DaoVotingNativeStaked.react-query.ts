/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Admin, Duration, InstantiateMsg, ExecuteMsg, Uint128, QueryMsg, MigrateMsg, Expiration, Timestamp, Uint64, ClaimsResponse, Claim, Addr, Config, InfoResponse, ContractVersion, ListStakersResponse, StakerBalanceResponse, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingNativeStaked.types";
import { DaoVotingNativeStakedQueryClient, DaoVotingNativeStakedClient } from "./DaoVotingNativeStaked.client";
export const daoVotingNativeStakedQueryKeys = {
  contract: ([{
    contract: "daoVotingNativeStaked"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoVotingNativeStakedQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "get_config",
    args
  }] as const),
  claims: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "claims",
    args
  }] as const),
  listStakers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "list_stakers",
    args
  }] as const),
  votingPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "voting_power_at_height",
    args
  }] as const),
  totalPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "total_power_at_height",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingNativeStakedQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const)
};
export const daoVotingNativeStakedQueries = {
  getConfig: <TData = Config,>({
    client,
    options
  }: DaoVotingNativeStakedGetConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.getConfig(client?.contractAddress),
    queryFn: () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  claims: <TData = ClaimsResponse,>({
    client,
    args,
    options
  }: DaoVotingNativeStakedClaimsQuery<TData>): UseQueryOptions<ClaimsResponse, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.claims(client?.contractAddress, args),
    queryFn: () => client ? client.claims({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listStakers: <TData = ListStakersResponse,>({
    client,
    args,
    options
  }: DaoVotingNativeStakedListStakersQuery<TData>): UseQueryOptions<ListStakersResponse, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.listStakers(client?.contractAddress, args),
    queryFn: () => client ? client.listStakers({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoVotingNativeStakedVotingPowerAtHeightQuery<TData>): UseQueryOptions<VotingPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.votingPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.votingPowerAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoVotingNativeStakedTotalPowerAtHeightQuery<TData>): UseQueryOptions<TotalPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.totalPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.totalPowerAtHeight({
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoVotingNativeStakedDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoVotingNativeStakedInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoVotingNativeStakedQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoVotingNativeStakedReactQuery<TResponse, TData = TResponse> {
  client: DaoVotingNativeStakedQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoVotingNativeStakedInfoQuery<TData> extends DaoVotingNativeStakedReactQuery<InfoResponse, TData> {}
export function useDaoVotingNativeStakedInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoVotingNativeStakedInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoVotingNativeStakedQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedDaoQuery<TData> extends DaoVotingNativeStakedReactQuery<Addr, TData> {}
export function useDaoVotingNativeStakedDaoQuery<TData = Addr>({
  client,
  options
}: DaoVotingNativeStakedDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoVotingNativeStakedQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedTotalPowerAtHeightQuery<TData> extends DaoVotingNativeStakedReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoVotingNativeStakedTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingNativeStakedTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(daoVotingNativeStakedQueryKeys.totalPowerAtHeight(client?.contractAddress, args), () => client ? client.totalPowerAtHeight({
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedVotingPowerAtHeightQuery<TData> extends DaoVotingNativeStakedReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoVotingNativeStakedVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingNativeStakedVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(daoVotingNativeStakedQueryKeys.votingPowerAtHeight(client?.contractAddress, args), () => client ? client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedListStakersQuery<TData> extends DaoVotingNativeStakedReactQuery<ListStakersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoVotingNativeStakedListStakersQuery<TData = ListStakersResponse>({
  client,
  args,
  options
}: DaoVotingNativeStakedListStakersQuery<TData>) {
  return useQuery<ListStakersResponse, Error, TData>(daoVotingNativeStakedQueryKeys.listStakers(client?.contractAddress, args), () => client ? client.listStakers({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedClaimsQuery<TData> extends DaoVotingNativeStakedReactQuery<ClaimsResponse, TData> {
  args: {
    address: string;
  };
}
export function useDaoVotingNativeStakedClaimsQuery<TData = ClaimsResponse>({
  client,
  args,
  options
}: DaoVotingNativeStakedClaimsQuery<TData>) {
  return useQuery<ClaimsResponse, Error, TData>(daoVotingNativeStakedQueryKeys.claims(client?.contractAddress, args), () => client ? client.claims({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedGetConfigQuery<TData> extends DaoVotingNativeStakedReactQuery<Config, TData> {}
export function useDaoVotingNativeStakedGetConfigQuery<TData = Config>({
  client,
  options
}: DaoVotingNativeStakedGetConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoVotingNativeStakedQueryKeys.getConfig(client?.contractAddress), () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingNativeStakedClaimMutation {
  client: DaoVotingNativeStakedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoVotingNativeStakedClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoVotingNativeStakedClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoVotingNativeStakedClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface DaoVotingNativeStakedUpdateConfigMutation {
  client: DaoVotingNativeStakedClient;
  msg: {
    duration?: Duration;
    manager?: string;
    owner?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoVotingNativeStakedUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoVotingNativeStakedUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoVotingNativeStakedUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoVotingNativeStakedUnstakeMutation {
  client: DaoVotingNativeStakedClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoVotingNativeStakedUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoVotingNativeStakedUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoVotingNativeStakedUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface DaoVotingNativeStakedStakeMutation {
  client: DaoVotingNativeStakedClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoVotingNativeStakedStakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoVotingNativeStakedStakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoVotingNativeStakedStakeMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.stake(fee, memo, funds), options);
}