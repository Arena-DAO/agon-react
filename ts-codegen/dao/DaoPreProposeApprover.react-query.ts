/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, ApproverProposeMessage, Uint128, DepositToken, UncheckedDenom, DepositRefundPolicy, Status, UncheckedDepositInfo, Empty, QueryMsg, QueryExt, CheckedDenom, Addr, Config, CheckedDepositInfo, DepositInfoResponse, HooksResponse, Binary } from "./DaoPreProposeApprover.types";
import { DaoPreProposeApproverQueryClient, DaoPreProposeApproverClient } from "./DaoPreProposeApprover.client";
export const daoPreProposeApproverQueryKeys = {
  contract: ([{
    contract: "daoPreProposeApprover"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoPreProposeApproverQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  proposalModule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "proposal_module",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  depositInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "deposit_info",
    args
  }] as const),
  proposalSubmittedHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "proposal_submitted_hooks",
    args
  }] as const),
  queryExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApproverQueryKeys.address(contractAddress)[0],
    method: "query_extension",
    args
  }] as const)
};
export const daoPreProposeApproverQueries = {
  proposalModule: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeApproverProposalModuleQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.proposalModule(client?.contractAddress),
    queryFn: () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeApproverDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = Config,>({
    client,
    options
  }: DaoPreProposeApproverConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  depositInfo: <TData = DepositInfoResponse,>({
    client,
    args,
    options
  }: DaoPreProposeApproverDepositInfoQuery<TData>): UseQueryOptions<DepositInfoResponse, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.depositInfo(client?.contractAddress, args),
    queryFn: () => client ? client.depositInfo({
      proposalId: args.proposalId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalSubmittedHooks: <TData = HooksResponse,>({
    client,
    options
  }: DaoPreProposeApproverProposalSubmittedHooksQuery<TData>): UseQueryOptions<HooksResponse, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.proposalSubmittedHooks(client?.contractAddress),
    queryFn: () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  queryExtension: <TData = Binary,>({
    client,
    args,
    options
  }: DaoPreProposeApproverQueryExtensionQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: daoPreProposeApproverQueryKeys.queryExtension(client?.contractAddress, args),
    queryFn: () => client ? client.queryExtension({
      msg: args.msg
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoPreProposeApproverReactQuery<TResponse, TData = TResponse> {
  client: DaoPreProposeApproverQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoPreProposeApproverQueryExtensionQuery<TData> extends DaoPreProposeApproverReactQuery<Binary, TData> {
  args: {
    msg: QueryExt;
  };
}
export function useDaoPreProposeApproverQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: DaoPreProposeApproverQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(daoPreProposeApproverQueryKeys.queryExtension(client?.contractAddress, args), () => client ? client.queryExtension({
    msg: args.msg
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverProposalSubmittedHooksQuery<TData> extends DaoPreProposeApproverReactQuery<HooksResponse, TData> {}
export function useDaoPreProposeApproverProposalSubmittedHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoPreProposeApproverProposalSubmittedHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(daoPreProposeApproverQueryKeys.proposalSubmittedHooks(client?.contractAddress), () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverDepositInfoQuery<TData> extends DaoPreProposeApproverReactQuery<DepositInfoResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useDaoPreProposeApproverDepositInfoQuery<TData = DepositInfoResponse>({
  client,
  args,
  options
}: DaoPreProposeApproverDepositInfoQuery<TData>) {
  return useQuery<DepositInfoResponse, Error, TData>(daoPreProposeApproverQueryKeys.depositInfo(client?.contractAddress, args), () => client ? client.depositInfo({
    proposalId: args.proposalId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverConfigQuery<TData> extends DaoPreProposeApproverReactQuery<Config, TData> {}
export function useDaoPreProposeApproverConfigQuery<TData = Config>({
  client,
  options
}: DaoPreProposeApproverConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoPreProposeApproverQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverDaoQuery<TData> extends DaoPreProposeApproverReactQuery<Addr, TData> {}
export function useDaoPreProposeApproverDaoQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeApproverDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeApproverQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverProposalModuleQuery<TData> extends DaoPreProposeApproverReactQuery<Addr, TData> {}
export function useDaoPreProposeApproverProposalModuleQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeApproverProposalModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeApproverQueryKeys.proposalModule(client?.contractAddress), () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApproverProposalCompletedHookMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    newStatus: Status;
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverProposalCompletedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverProposalCompletedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverProposalCompletedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposalCompletedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverRemoveProposalSubmittedHookMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverRemoveProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverRemoveProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverRemoveProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverAddProposalSubmittedHookMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverAddProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverAddProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverAddProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverExtensionMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    msg: Empty;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverWithdrawMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    denom?: UncheckedDenom;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverUpdateConfigMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    depositInfo?: UncheckedDepositInfo;
    openProposalSubmission: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApproverProposeMutation {
  client: DaoPreProposeApproverClient;
  msg: {
    msg: ApproverProposeMessage;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApproverProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApproverProposeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApproverProposeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.propose(msg, fee, memo, funds), options);
}