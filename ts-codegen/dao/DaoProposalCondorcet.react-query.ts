/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Duration, PercentageThreshold, Decimal, InstantiateMsg, ExecuteMsg, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Choice, Coin, Empty, IbcTimeout, IbcTimeoutBlock, UncheckedConfig, QueryMsg, Config, Addr, InfoResponse, ContractVersion, Status, Expiration, Cell, Winner, ProposalResponse, Proposal, Tally, M } from "./DaoProposalCondorcet.types";
import { DaoProposalCondorcetQueryClient, DaoProposalCondorcetClient } from "./DaoProposalCondorcet.client";
export const daoProposalCondorcetQueryKeys = {
  contract: ([{
    contract: "daoProposalCondorcet"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoProposalCondorcetQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  proposal: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalCondorcetQueryKeys.address(contractAddress)[0],
    method: "proposal",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalCondorcetQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalCondorcetQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalCondorcetQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  nextProposalId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalCondorcetQueryKeys.address(contractAddress)[0],
    method: "next_proposal_id",
    args
  }] as const)
};
export const daoProposalCondorcetQueries = {
  proposal: <TData = ProposalResponse,>({
    client,
    args,
    options
  }: DaoProposalCondorcetProposalQuery<TData>): UseQueryOptions<ProposalResponse, Error, TData> => ({
    queryKey: daoProposalCondorcetQueryKeys.proposal(client?.contractAddress, args),
    queryFn: () => client ? client.proposal({
      id: args.id
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = Config,>({
    client,
    options
  }: DaoProposalCondorcetConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoProposalCondorcetQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoProposalCondorcetDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoProposalCondorcetQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoProposalCondorcetInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoProposalCondorcetQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  nextProposalId: <TData = Uint64,>({
    client,
    options
  }: DaoProposalCondorcetNextProposalIdQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: daoProposalCondorcetQueryKeys.nextProposalId(client?.contractAddress),
    queryFn: () => client ? client.nextProposalId() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoProposalCondorcetReactQuery<TResponse, TData = TResponse> {
  client: DaoProposalCondorcetQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoProposalCondorcetNextProposalIdQuery<TData> extends DaoProposalCondorcetReactQuery<Uint64, TData> {}
export function useDaoProposalCondorcetNextProposalIdQuery<TData = Uint64>({
  client,
  options
}: DaoProposalCondorcetNextProposalIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(daoProposalCondorcetQueryKeys.nextProposalId(client?.contractAddress), () => client ? client.nextProposalId() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalCondorcetInfoQuery<TData> extends DaoProposalCondorcetReactQuery<InfoResponse, TData> {}
export function useDaoProposalCondorcetInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoProposalCondorcetInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoProposalCondorcetQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalCondorcetDaoQuery<TData> extends DaoProposalCondorcetReactQuery<Addr, TData> {}
export function useDaoProposalCondorcetDaoQuery<TData = Addr>({
  client,
  options
}: DaoProposalCondorcetDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoProposalCondorcetQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalCondorcetConfigQuery<TData> extends DaoProposalCondorcetReactQuery<Config, TData> {}
export function useDaoProposalCondorcetConfigQuery<TData = Config>({
  client,
  options
}: DaoProposalCondorcetConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoProposalCondorcetQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalCondorcetProposalQuery<TData> extends DaoProposalCondorcetReactQuery<ProposalResponse, TData> {
  args: {
    id: number;
  };
}
export function useDaoProposalCondorcetProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options
}: DaoProposalCondorcetProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(daoProposalCondorcetQueryKeys.proposal(client?.contractAddress, args), () => client ? client.proposal({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalCondorcetSetConfigMutation {
  client: DaoProposalCondorcetClient;
  msg: {
    closeProposalsOnExecutionFailure: boolean;
    minVotingPeriod?: Duration;
    quorum: PercentageThreshold;
    votingPeriod: Duration;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalCondorcetSetConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalCondorcetSetConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalCondorcetSetConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setConfig(msg, fee, memo, funds), options);
}
export interface DaoProposalCondorcetCloseMutation {
  client: DaoProposalCondorcetClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalCondorcetCloseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalCondorcetCloseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalCondorcetCloseMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.close(msg, fee, memo, funds), options);
}
export interface DaoProposalCondorcetExecuteMutation {
  client: DaoProposalCondorcetClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalCondorcetExecuteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalCondorcetExecuteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalCondorcetExecuteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.execute(msg, fee, memo, funds), options);
}
export interface DaoProposalCondorcetVoteMutation {
  client: DaoProposalCondorcetClient;
  msg: {
    proposalId: number;
    vote: number[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalCondorcetVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalCondorcetVoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalCondorcetVoteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.vote(msg, fee, memo, funds), options);
}
export interface DaoProposalCondorcetProposeMutation {
  client: DaoProposalCondorcetClient;
  msg: {
    choices: Choice[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalCondorcetProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalCondorcetProposeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalCondorcetProposeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.propose(msg, fee, memo, funds), options);
}