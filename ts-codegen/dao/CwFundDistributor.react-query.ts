/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ActiveThreshold, Uint128, Decimal, TokenInfo, StakingInfo, Duration, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, ExecuteMsg, QueryMsg, MigrateMsg, ActiveThresholdResponse, Addr, InfoResponse, ContractVersion, Boolean, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./CwFundDistributor.types";
import { CwFundDistributorQueryClient, CwFundDistributorClient } from "./CwFundDistributor.client";
export const cwFundDistributorQueryKeys = {
  contract: ([{
    contract: "cwFundDistributor"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cwFundDistributorQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  stakingContract: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "staking_contract",
    args
  }] as const),
  activeThreshold: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "active_threshold",
    args
  }] as const),
  votingPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "voting_power_at_height",
    args
  }] as const),
  totalPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "total_power_at_height",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  tokenContract: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "token_contract",
    args
  }] as const),
  isActive: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwFundDistributorQueryKeys.address(contractAddress)[0],
    method: "is_active",
    args
  }] as const)
};
export const cwFundDistributorQueries = {
  stakingContract: <TData = Addr,>({
    client,
    options
  }: CwFundDistributorStakingContractQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.stakingContract(client?.contractAddress),
    queryFn: () => client ? client.stakingContract() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  activeThreshold: <TData = ActiveThresholdResponse,>({
    client,
    options
  }: CwFundDistributorActiveThresholdQuery<TData>): UseQueryOptions<ActiveThresholdResponse, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.activeThreshold(client?.contractAddress),
    queryFn: () => client ? client.activeThreshold() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse,>({
    client,
    args,
    options
  }: CwFundDistributorVotingPowerAtHeightQuery<TData>): UseQueryOptions<VotingPowerAtHeightResponse, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.votingPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.votingPowerAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse,>({
    client,
    args,
    options
  }: CwFundDistributorTotalPowerAtHeightQuery<TData>): UseQueryOptions<TotalPowerAtHeightResponse, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.totalPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.totalPowerAtHeight({
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: CwFundDistributorDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: CwFundDistributorInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  tokenContract: <TData = Addr,>({
    client,
    options
  }: CwFundDistributorTokenContractQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.tokenContract(client?.contractAddress),
    queryFn: () => client ? client.tokenContract() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isActive: <TData = Boolean,>({
    client,
    options
  }: CwFundDistributorIsActiveQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: cwFundDistributorQueryKeys.isActive(client?.contractAddress),
    queryFn: () => client ? client.isActive() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwFundDistributorReactQuery<TResponse, TData = TResponse> {
  client: CwFundDistributorQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwFundDistributorIsActiveQuery<TData> extends CwFundDistributorReactQuery<Boolean, TData> {}
export function useCwFundDistributorIsActiveQuery<TData = Boolean>({
  client,
  options
}: CwFundDistributorIsActiveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(cwFundDistributorQueryKeys.isActive(client?.contractAddress), () => client ? client.isActive() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorTokenContractQuery<TData> extends CwFundDistributorReactQuery<Addr, TData> {}
export function useCwFundDistributorTokenContractQuery<TData = Addr>({
  client,
  options
}: CwFundDistributorTokenContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(cwFundDistributorQueryKeys.tokenContract(client?.contractAddress), () => client ? client.tokenContract() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorInfoQuery<TData> extends CwFundDistributorReactQuery<InfoResponse, TData> {}
export function useCwFundDistributorInfoQuery<TData = InfoResponse>({
  client,
  options
}: CwFundDistributorInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(cwFundDistributorQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorDaoQuery<TData> extends CwFundDistributorReactQuery<Addr, TData> {}
export function useCwFundDistributorDaoQuery<TData = Addr>({
  client,
  options
}: CwFundDistributorDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(cwFundDistributorQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorTotalPowerAtHeightQuery<TData> extends CwFundDistributorReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useCwFundDistributorTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: CwFundDistributorTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(cwFundDistributorQueryKeys.totalPowerAtHeight(client?.contractAddress, args), () => client ? client.totalPowerAtHeight({
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorVotingPowerAtHeightQuery<TData> extends CwFundDistributorReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useCwFundDistributorVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: CwFundDistributorVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(cwFundDistributorQueryKeys.votingPowerAtHeight(client?.contractAddress, args), () => client ? client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorActiveThresholdQuery<TData> extends CwFundDistributorReactQuery<ActiveThresholdResponse, TData> {}
export function useCwFundDistributorActiveThresholdQuery<TData = ActiveThresholdResponse>({
  client,
  options
}: CwFundDistributorActiveThresholdQuery<TData>) {
  return useQuery<ActiveThresholdResponse, Error, TData>(cwFundDistributorQueryKeys.activeThreshold(client?.contractAddress), () => client ? client.activeThreshold() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorStakingContractQuery<TData> extends CwFundDistributorReactQuery<Addr, TData> {}
export function useCwFundDistributorStakingContractQuery<TData = Addr>({
  client,
  options
}: CwFundDistributorStakingContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(cwFundDistributorQueryKeys.stakingContract(client?.contractAddress), () => client ? client.stakingContract() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwFundDistributorUpdateActiveThresholdMutation {
  client: CwFundDistributorClient;
  msg: {
    newThreshold?: ActiveThreshold;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwFundDistributorUpdateActiveThresholdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwFundDistributorUpdateActiveThresholdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwFundDistributorUpdateActiveThresholdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateActiveThreshold(msg, fee, memo, funds), options);
}