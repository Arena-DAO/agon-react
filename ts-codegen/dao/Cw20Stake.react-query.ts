/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { Duration, InstantiateMsg, ExecuteMsg, Uint128, Binary, Action, Expiration, Timestamp, Uint64, Cw20ReceiveMsg, QueryMsg, MigrateMsg, ClaimsResponse, Claim, Addr, Config, GetHooksResponse, ListStakersResponse, StakerBalanceResponse, OwnershipForAddr, StakedBalanceAtHeightResponse, StakedValueResponse, TotalStakedAtHeightResponse, TotalValueResponse } from "./Cw20Stake.types";
import { Cw20StakeQueryClient, Cw20StakeClient } from "./Cw20Stake.client";
export const cw20StakeQueryKeys = {
  contract: ([{
    contract: "cw20Stake"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cw20StakeQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  stakedBalanceAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "staked_balance_at_height",
    args
  }] as const),
  totalStakedAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "total_staked_at_height",
    args
  }] as const),
  stakedValue: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "staked_value",
    args
  }] as const),
  totalValue: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "total_value",
    args
  }] as const),
  getConfig: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "get_config",
    args
  }] as const),
  claims: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "claims",
    args
  }] as const),
  getHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "get_hooks",
    args
  }] as const),
  listStakers: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "list_stakers",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cw20StakeQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const)
};
export const cw20StakeQueries = {
  stakedBalanceAtHeight: <TData = StakedBalanceAtHeightResponse,>({
    client,
    args,
    options
  }: Cw20StakeStakedBalanceAtHeightQuery<TData>): UseQueryOptions<StakedBalanceAtHeightResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.stakedBalanceAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.stakedBalanceAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalStakedAtHeight: <TData = TotalStakedAtHeightResponse,>({
    client,
    args,
    options
  }: Cw20StakeTotalStakedAtHeightQuery<TData>): UseQueryOptions<TotalStakedAtHeightResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.totalStakedAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.totalStakedAtHeight({
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  stakedValue: <TData = StakedValueResponse,>({
    client,
    args,
    options
  }: Cw20StakeStakedValueQuery<TData>): UseQueryOptions<StakedValueResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.stakedValue(client?.contractAddress, args),
    queryFn: () => client ? client.stakedValue({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalValue: <TData = TotalValueResponse,>({
    client,
    options
  }: Cw20StakeTotalValueQuery<TData>): UseQueryOptions<TotalValueResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.totalValue(client?.contractAddress),
    queryFn: () => client ? client.totalValue() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getConfig: <TData = Config,>({
    client,
    options
  }: Cw20StakeGetConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.getConfig(client?.contractAddress),
    queryFn: () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  claims: <TData = ClaimsResponse,>({
    client,
    args,
    options
  }: Cw20StakeClaimsQuery<TData>): UseQueryOptions<ClaimsResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.claims(client?.contractAddress, args),
    queryFn: () => client ? client.claims({
      address: args.address
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getHooks: <TData = GetHooksResponse,>({
    client,
    options
  }: Cw20StakeGetHooksQuery<TData>): UseQueryOptions<GetHooksResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.getHooks(client?.contractAddress),
    queryFn: () => client ? client.getHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listStakers: <TData = ListStakersResponse,>({
    client,
    args,
    options
  }: Cw20StakeListStakersQuery<TData>): UseQueryOptions<ListStakersResponse, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.listStakers(client?.contractAddress, args),
    queryFn: () => client ? client.listStakers({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForAddr,>({
    client,
    options
  }: Cw20StakeOwnershipQuery<TData>): UseQueryOptions<OwnershipForAddr, Error, TData> => ({
    queryKey: cw20StakeQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface Cw20StakeReactQuery<TResponse, TData = TResponse> {
  client: Cw20StakeQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface Cw20StakeOwnershipQuery<TData> extends Cw20StakeReactQuery<OwnershipForAddr, TData> {}
export function useCw20StakeOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options
}: Cw20StakeOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(cw20StakeQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeListStakersQuery<TData> extends Cw20StakeReactQuery<ListStakersResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCw20StakeListStakersQuery<TData = ListStakersResponse>({
  client,
  args,
  options
}: Cw20StakeListStakersQuery<TData>) {
  return useQuery<ListStakersResponse, Error, TData>(cw20StakeQueryKeys.listStakers(client?.contractAddress, args), () => client ? client.listStakers({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeGetHooksQuery<TData> extends Cw20StakeReactQuery<GetHooksResponse, TData> {}
export function useCw20StakeGetHooksQuery<TData = GetHooksResponse>({
  client,
  options
}: Cw20StakeGetHooksQuery<TData>) {
  return useQuery<GetHooksResponse, Error, TData>(cw20StakeQueryKeys.getHooks(client?.contractAddress), () => client ? client.getHooks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeClaimsQuery<TData> extends Cw20StakeReactQuery<ClaimsResponse, TData> {
  args: {
    address: string;
  };
}
export function useCw20StakeClaimsQuery<TData = ClaimsResponse>({
  client,
  args,
  options
}: Cw20StakeClaimsQuery<TData>) {
  return useQuery<ClaimsResponse, Error, TData>(cw20StakeQueryKeys.claims(client?.contractAddress, args), () => client ? client.claims({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeGetConfigQuery<TData> extends Cw20StakeReactQuery<Config, TData> {}
export function useCw20StakeGetConfigQuery<TData = Config>({
  client,
  options
}: Cw20StakeGetConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(cw20StakeQueryKeys.getConfig(client?.contractAddress), () => client ? client.getConfig() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeTotalValueQuery<TData> extends Cw20StakeReactQuery<TotalValueResponse, TData> {}
export function useCw20StakeTotalValueQuery<TData = TotalValueResponse>({
  client,
  options
}: Cw20StakeTotalValueQuery<TData>) {
  return useQuery<TotalValueResponse, Error, TData>(cw20StakeQueryKeys.totalValue(client?.contractAddress), () => client ? client.totalValue() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeStakedValueQuery<TData> extends Cw20StakeReactQuery<StakedValueResponse, TData> {
  args: {
    address: string;
  };
}
export function useCw20StakeStakedValueQuery<TData = StakedValueResponse>({
  client,
  args,
  options
}: Cw20StakeStakedValueQuery<TData>) {
  return useQuery<StakedValueResponse, Error, TData>(cw20StakeQueryKeys.stakedValue(client?.contractAddress, args), () => client ? client.stakedValue({
    address: args.address
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeTotalStakedAtHeightQuery<TData> extends Cw20StakeReactQuery<TotalStakedAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useCw20StakeTotalStakedAtHeightQuery<TData = TotalStakedAtHeightResponse>({
  client,
  args,
  options
}: Cw20StakeTotalStakedAtHeightQuery<TData>) {
  return useQuery<TotalStakedAtHeightResponse, Error, TData>(cw20StakeQueryKeys.totalStakedAtHeight(client?.contractAddress, args), () => client ? client.totalStakedAtHeight({
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeStakedBalanceAtHeightQuery<TData> extends Cw20StakeReactQuery<StakedBalanceAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useCw20StakeStakedBalanceAtHeightQuery<TData = StakedBalanceAtHeightResponse>({
  client,
  args,
  options
}: Cw20StakeStakedBalanceAtHeightQuery<TData>) {
  return useQuery<StakedBalanceAtHeightResponse, Error, TData>(cw20StakeQueryKeys.stakedBalanceAtHeight(client?.contractAddress, args), () => client ? client.stakedBalanceAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface Cw20StakeUpdateOwnershipMutation {
  client: Cw20StakeClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface Cw20StakeRemoveHookMutation {
  client: Cw20StakeClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeRemoveHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeRemoveHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeRemoveHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeHook(msg, fee, memo, funds), options);
}
export interface Cw20StakeAddHookMutation {
  client: Cw20StakeClient;
  msg: {
    addr: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeAddHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeAddHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeAddHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addHook(msg, fee, memo, funds), options);
}
export interface Cw20StakeUpdateConfigMutation {
  client: Cw20StakeClient;
  msg: {
    duration?: Duration;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface Cw20StakeClaimMutation {
  client: Cw20StakeClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeClaimMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeClaimMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeClaimMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.claim(fee, memo, funds), options);
}
export interface Cw20StakeUnstakeMutation {
  client: Cw20StakeClient;
  msg: {
    amount: Uint128;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeUnstakeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeUnstakeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeUnstakeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.unstake(msg, fee, memo, funds), options);
}
export interface Cw20StakeReceiveMutation {
  client: Cw20StakeClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCw20StakeReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, Cw20StakeReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, Cw20StakeReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}