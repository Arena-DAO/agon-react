/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { ActiveThreshold, Uint128, Decimal, TokenInfo, StakingInfo, Duration, Logo, EmbeddedLogo, Binary, InstantiateMsg, Cw20Coin, InstantiateMarketingInfo, ExecuteMsg, QueryMsg, MigrateMsg, ActiveThresholdResponse, Addr, InfoResponse, ContractVersion, Boolean, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoVotingCw20Staked.types";
import { DaoVotingCw20StakedQueryClient, DaoVotingCw20StakedClient } from "./DaoVotingCw20Staked.client";
export const daoVotingCw20StakedQueryKeys = {
  contract: ([{
    contract: "daoVotingCw20Staked"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoVotingCw20StakedQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  stakingContract: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "staking_contract",
    args
  }] as const),
  activeThreshold: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "active_threshold",
    args
  }] as const),
  votingPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "voting_power_at_height",
    args
  }] as const),
  totalPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "total_power_at_height",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  tokenContract: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "token_contract",
    args
  }] as const),
  isActive: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoVotingCw20StakedQueryKeys.address(contractAddress)[0],
    method: "is_active",
    args
  }] as const)
};
export const daoVotingCw20StakedQueries = {
  stakingContract: <TData = Addr,>({
    client,
    options
  }: DaoVotingCw20StakedStakingContractQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.stakingContract(client?.contractAddress),
    queryFn: () => client ? client.stakingContract() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  activeThreshold: <TData = ActiveThresholdResponse,>({
    client,
    options
  }: DaoVotingCw20StakedActiveThresholdQuery<TData>): UseQueryOptions<ActiveThresholdResponse, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.activeThreshold(client?.contractAddress),
    queryFn: () => client ? client.activeThreshold() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoVotingCw20StakedVotingPowerAtHeightQuery<TData>): UseQueryOptions<VotingPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.votingPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.votingPowerAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoVotingCw20StakedTotalPowerAtHeightQuery<TData>): UseQueryOptions<TotalPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.totalPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.totalPowerAtHeight({
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoVotingCw20StakedDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoVotingCw20StakedInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  tokenContract: <TData = Addr,>({
    client,
    options
  }: DaoVotingCw20StakedTokenContractQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.tokenContract(client?.contractAddress),
    queryFn: () => client ? client.tokenContract() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  isActive: <TData = Boolean,>({
    client,
    options
  }: DaoVotingCw20StakedIsActiveQuery<TData>): UseQueryOptions<Boolean, Error, TData> => ({
    queryKey: daoVotingCw20StakedQueryKeys.isActive(client?.contractAddress),
    queryFn: () => client ? client.isActive() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoVotingCw20StakedReactQuery<TResponse, TData = TResponse> {
  client: DaoVotingCw20StakedQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoVotingCw20StakedIsActiveQuery<TData> extends DaoVotingCw20StakedReactQuery<Boolean, TData> {}
export function useDaoVotingCw20StakedIsActiveQuery<TData = Boolean>({
  client,
  options
}: DaoVotingCw20StakedIsActiveQuery<TData>) {
  return useQuery<Boolean, Error, TData>(daoVotingCw20StakedQueryKeys.isActive(client?.contractAddress), () => client ? client.isActive() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedTokenContractQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedTokenContractQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedTokenContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoVotingCw20StakedQueryKeys.tokenContract(client?.contractAddress), () => client ? client.tokenContract() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedInfoQuery<TData> extends DaoVotingCw20StakedReactQuery<InfoResponse, TData> {}
export function useDaoVotingCw20StakedInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoVotingCw20StakedInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoVotingCw20StakedQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedDaoQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedDaoQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoVotingCw20StakedQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedTotalPowerAtHeightQuery<TData> extends DaoVotingCw20StakedReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoVotingCw20StakedTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw20StakedTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(daoVotingCw20StakedQueryKeys.totalPowerAtHeight(client?.contractAddress, args), () => client ? client.totalPowerAtHeight({
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedVotingPowerAtHeightQuery<TData> extends DaoVotingCw20StakedReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoVotingCw20StakedVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoVotingCw20StakedVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(daoVotingCw20StakedQueryKeys.votingPowerAtHeight(client?.contractAddress, args), () => client ? client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedActiveThresholdQuery<TData> extends DaoVotingCw20StakedReactQuery<ActiveThresholdResponse, TData> {}
export function useDaoVotingCw20StakedActiveThresholdQuery<TData = ActiveThresholdResponse>({
  client,
  options
}: DaoVotingCw20StakedActiveThresholdQuery<TData>) {
  return useQuery<ActiveThresholdResponse, Error, TData>(daoVotingCw20StakedQueryKeys.activeThreshold(client?.contractAddress), () => client ? client.activeThreshold() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedStakingContractQuery<TData> extends DaoVotingCw20StakedReactQuery<Addr, TData> {}
export function useDaoVotingCw20StakedStakingContractQuery<TData = Addr>({
  client,
  options
}: DaoVotingCw20StakedStakingContractQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoVotingCw20StakedQueryKeys.stakingContract(client?.contractAddress), () => client ? client.stakingContract() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoVotingCw20StakedUpdateActiveThresholdMutation {
  client: DaoVotingCw20StakedClient;
  msg: {
    newThreshold?: ActiveThreshold;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoVotingCw20StakedUpdateActiveThresholdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoVotingCw20StakedUpdateActiveThresholdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoVotingCw20StakedUpdateActiveThresholdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateActiveThreshold(msg, fee, memo, funds), options);
}