/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Uint128, DepositToken, UncheckedDenom, DepositRefundPolicy, InstantiateMsg, UncheckedDepositInfo, InstantiateExt, ExecuteMsg, ProposeMessage, CosmosMsgForEmpty, BankMsg, StakingMsg, DistributionMsg, Binary, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, ExecuteExt, Status, Coin, Empty, IbcTimeout, IbcTimeoutBlock, QueryMsg, QueryExt, CheckedDenom, Addr, Config, CheckedDepositInfo, DepositInfoResponse, HooksResponse } from "./DaoPreProposeApprovalSingle.types";
import { DaoPreProposeApprovalSingleQueryClient, DaoPreProposeApprovalSingleClient } from "./DaoPreProposeApprovalSingle.client";
export const daoPreProposeApprovalSingleQueryKeys = {
  contract: ([{
    contract: "daoPreProposeApprovalSingle"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoPreProposeApprovalSingleQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  proposalModule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "proposal_module",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  depositInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "deposit_info",
    args
  }] as const),
  proposalSubmittedHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "proposal_submitted_hooks",
    args
  }] as const),
  queryExtension: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoPreProposeApprovalSingleQueryKeys.address(contractAddress)[0],
    method: "query_extension",
    args
  }] as const)
};
export const daoPreProposeApprovalSingleQueries = {
  proposalModule: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeApprovalSingleProposalModuleQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.proposalModule(client?.contractAddress),
    queryFn: () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoPreProposeApprovalSingleDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = Config,>({
    client,
    options
  }: DaoPreProposeApprovalSingleConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  depositInfo: <TData = DepositInfoResponse,>({
    client,
    args,
    options
  }: DaoPreProposeApprovalSingleDepositInfoQuery<TData>): UseQueryOptions<DepositInfoResponse, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.depositInfo(client?.contractAddress, args),
    queryFn: () => client ? client.depositInfo({
      proposalId: args.proposalId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalSubmittedHooks: <TData = HooksResponse,>({
    client,
    options
  }: DaoPreProposeApprovalSingleProposalSubmittedHooksQuery<TData>): UseQueryOptions<HooksResponse, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.proposalSubmittedHooks(client?.contractAddress),
    queryFn: () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  queryExtension: <TData = Binary,>({
    client,
    args,
    options
  }: DaoPreProposeApprovalSingleQueryExtensionQuery<TData>): UseQueryOptions<Binary, Error, TData> => ({
    queryKey: daoPreProposeApprovalSingleQueryKeys.queryExtension(client?.contractAddress, args),
    queryFn: () => client ? client.queryExtension({
      msg: args.msg
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoPreProposeApprovalSingleReactQuery<TResponse, TData = TResponse> {
  client: DaoPreProposeApprovalSingleQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoPreProposeApprovalSingleQueryExtensionQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<Binary, TData> {
  args: {
    msg: QueryExt;
  };
}
export function useDaoPreProposeApprovalSingleQueryExtensionQuery<TData = Binary>({
  client,
  args,
  options
}: DaoPreProposeApprovalSingleQueryExtensionQuery<TData>) {
  return useQuery<Binary, Error, TData>(daoPreProposeApprovalSingleQueryKeys.queryExtension(client?.contractAddress, args), () => client ? client.queryExtension({
    msg: args.msg
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleProposalSubmittedHooksQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<HooksResponse, TData> {}
export function useDaoPreProposeApprovalSingleProposalSubmittedHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoPreProposeApprovalSingleProposalSubmittedHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(daoPreProposeApprovalSingleQueryKeys.proposalSubmittedHooks(client?.contractAddress), () => client ? client.proposalSubmittedHooks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleDepositInfoQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<DepositInfoResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useDaoPreProposeApprovalSingleDepositInfoQuery<TData = DepositInfoResponse>({
  client,
  args,
  options
}: DaoPreProposeApprovalSingleDepositInfoQuery<TData>) {
  return useQuery<DepositInfoResponse, Error, TData>(daoPreProposeApprovalSingleQueryKeys.depositInfo(client?.contractAddress, args), () => client ? client.depositInfo({
    proposalId: args.proposalId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleConfigQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<Config, TData> {}
export function useDaoPreProposeApprovalSingleConfigQuery<TData = Config>({
  client,
  options
}: DaoPreProposeApprovalSingleConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoPreProposeApprovalSingleQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleDaoQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<Addr, TData> {}
export function useDaoPreProposeApprovalSingleDaoQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeApprovalSingleDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeApprovalSingleQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleProposalModuleQuery<TData> extends DaoPreProposeApprovalSingleReactQuery<Addr, TData> {}
export function useDaoPreProposeApprovalSingleProposalModuleQuery<TData = Addr>({
  client,
  options
}: DaoPreProposeApprovalSingleProposalModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoPreProposeApprovalSingleQueryKeys.proposalModule(client?.contractAddress), () => client ? client.proposalModule() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoPreProposeApprovalSingleProposalCompletedHookMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    newStatus: Status;
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleProposalCompletedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleProposalCompletedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleProposalCompletedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.proposalCompletedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleRemoveProposalSubmittedHookMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleRemoveProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleRemoveProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleRemoveProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleAddProposalSubmittedHookMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleAddProposalSubmittedHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleAddProposalSubmittedHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleAddProposalSubmittedHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addProposalSubmittedHook(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleExtensionMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    msg: ExecuteExt;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleExtensionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleExtensionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleExtensionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.extension(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleWithdrawMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    denom?: UncheckedDenom;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleWithdrawMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleUpdateConfigMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    depositInfo?: UncheckedDepositInfo;
    openProposalSubmission: boolean;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoPreProposeApprovalSingleProposeMutation {
  client: DaoPreProposeApprovalSingleClient;
  msg: {
    msg: ProposeMessage;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoPreProposeApprovalSingleProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoPreProposeApprovalSingleProposeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoPreProposeApprovalSingleProposeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.propose(msg, fee, memo, funds), options);
}