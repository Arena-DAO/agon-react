/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.34.2.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { TokenInfo, Uint128, InstantiateMsg, Counterparty, ExecuteMsg, Binary, Cw20ReceiveMsg, QueryMsg, MigrateMsg, Addr, CheckedTokenInfo, StatusResponse, CheckedCounterparty } from "./CwTokenSwap.types";
import { CwTokenSwapQueryClient, CwTokenSwapClient } from "./CwTokenSwap.client";
export const cwTokenSwapQueryKeys = {
  contract: ([{
    contract: "cwTokenSwap"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cwTokenSwapQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  status: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwTokenSwapQueryKeys.address(contractAddress)[0],
    method: "status",
    args
  }] as const)
};
export const cwTokenSwapQueries = {
  status: <TData = StatusResponse,>({
    client,
    options
  }: CwTokenSwapStatusQuery<TData>): UseQueryOptions<StatusResponse, Error, TData> => ({
    queryKey: cwTokenSwapQueryKeys.status(client?.contractAddress),
    queryFn: () => client ? client.status() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwTokenSwapReactQuery<TResponse, TData = TResponse> {
  client: CwTokenSwapQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwTokenSwapStatusQuery<TData> extends CwTokenSwapReactQuery<StatusResponse, TData> {}
export function useCwTokenSwapStatusQuery<TData = StatusResponse>({
  client,
  options
}: CwTokenSwapStatusQuery<TData>) {
  return useQuery<StatusResponse, Error, TData>(cwTokenSwapQueryKeys.status(client?.contractAddress), () => client ? client.status() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwTokenSwapWithdrawMutation {
  client: CwTokenSwapClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwTokenSwapWithdrawMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwTokenSwapWithdrawMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwTokenSwapWithdrawMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdraw(fee, memo, funds), options);
}
export interface CwTokenSwapFundMutation {
  client: CwTokenSwapClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwTokenSwapFundMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwTokenSwapFundMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwTokenSwapFundMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.fund(fee, memo, funds), options);
}
export interface CwTokenSwapReceiveMutation {
  client: CwTokenSwapClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwTokenSwapReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwTokenSwapReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwTokenSwapReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}