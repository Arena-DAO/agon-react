/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Admin, Binary, InstantiateMsg, InitialItem, ModuleInstantiateInfo, ExecuteMsg, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, Duration, Coin, Empty, IbcTimeout, IbcTimeoutBlock, Cw20ReceiveMsg, Cw721ReceiveMsg, Config, SubDao, QueryMsg, MigrateMsg, PreProposeInfo, MigrateParams, MigrateV1ToV2, MigrationModuleParams, ProposalParams, V1CodeIds, V2CodeIds, Addr, ProposalModuleStatus, ArrayOfProposalModule, ProposalModule, AdminNominationResponse, Cw20BalanceResponse, ArrayOfAddr, DaoURIResponse, PauseInfoResponse, Expiration, DumpStateResponse, ContractVersion, GetItemResponse, InfoResponse, ArrayOfString, ArrayOfSubDao, ProposalModuleCountResponse, TotalPowerAtHeightResponse, VotingPowerAtHeightResponse } from "./DaoCore.types";
import { DaoCoreQueryClient, DaoCoreClient } from "./DaoCore.client";
export const daoCoreQueryKeys = {
  contract: ([{
    contract: "daoCore"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoCoreQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  admin: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "admin",
    args
  }] as const),
  adminNomination: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "admin_nomination",
    args
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  cw20Balances: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "cw20_balances",
    args
  }] as const),
  cw20TokenList: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "cw20_token_list",
    args
  }] as const),
  cw721TokenList: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "cw721_token_list",
    args
  }] as const),
  dumpState: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "dump_state",
    args
  }] as const),
  getItem: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "get_item",
    args
  }] as const),
  listItems: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "list_items",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  proposalModules: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "proposal_modules",
    args
  }] as const),
  activeProposalModules: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "active_proposal_modules",
    args
  }] as const),
  proposalModuleCount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "proposal_module_count",
    args
  }] as const),
  pauseInfo: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "pause_info",
    args
  }] as const),
  votingModule: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "voting_module",
    args
  }] as const),
  listSubDaos: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "list_sub_daos",
    args
  }] as const),
  daoURI: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "dao_u_r_i",
    args
  }] as const),
  votingPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "voting_power_at_height",
    args
  }] as const),
  totalPowerAtHeight: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoCoreQueryKeys.address(contractAddress)[0],
    method: "total_power_at_height",
    args
  }] as const)
};
export const daoCoreQueries = {
  admin: <TData = Addr,>({
    client,
    options
  }: DaoCoreAdminQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoCoreQueryKeys.admin(client?.contractAddress),
    queryFn: () => client ? client.admin() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  adminNomination: <TData = AdminNominationResponse,>({
    client,
    options
  }: DaoCoreAdminNominationQuery<TData>): UseQueryOptions<AdminNominationResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.adminNomination(client?.contractAddress),
    queryFn: () => client ? client.adminNomination() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  config: <TData = Config,>({
    client,
    options
  }: DaoCoreConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoCoreQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  cw20Balances: <TData = Cw20BalanceResponse,>({
    client,
    args,
    options
  }: DaoCoreCw20BalancesQuery<TData>): UseQueryOptions<Cw20BalanceResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.cw20Balances(client?.contractAddress, args),
    queryFn: () => client ? client.cw20Balances({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  cw20TokenList: <TData = ArrayOfAddr,>({
    client,
    args,
    options
  }: DaoCoreCw20TokenListQuery<TData>): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: daoCoreQueryKeys.cw20TokenList(client?.contractAddress, args),
    queryFn: () => client ? client.cw20TokenList({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  cw721TokenList: <TData = ArrayOfAddr,>({
    client,
    args,
    options
  }: DaoCoreCw721TokenListQuery<TData>): UseQueryOptions<ArrayOfAddr, Error, TData> => ({
    queryKey: daoCoreQueryKeys.cw721TokenList(client?.contractAddress, args),
    queryFn: () => client ? client.cw721TokenList({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dumpState: <TData = DumpStateResponse,>({
    client,
    options
  }: DaoCoreDumpStateQuery<TData>): UseQueryOptions<DumpStateResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.dumpState(client?.contractAddress),
    queryFn: () => client ? client.dumpState() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getItem: <TData = GetItemResponse,>({
    client,
    args,
    options
  }: DaoCoreGetItemQuery<TData>): UseQueryOptions<GetItemResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.getItem(client?.contractAddress, args),
    queryFn: () => client ? client.getItem({
      key: args.key
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listItems: <TData = ArrayOfString,>({
    client,
    args,
    options
  }: DaoCoreListItemsQuery<TData>): UseQueryOptions<ArrayOfString, Error, TData> => ({
    queryKey: daoCoreQueryKeys.listItems(client?.contractAddress, args),
    queryFn: () => client ? client.listItems({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoCoreInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalModules: <TData = ArrayOfProposalModule,>({
    client,
    args,
    options
  }: DaoCoreProposalModulesQuery<TData>): UseQueryOptions<ArrayOfProposalModule, Error, TData> => ({
    queryKey: daoCoreQueryKeys.proposalModules(client?.contractAddress, args),
    queryFn: () => client ? client.proposalModules({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  activeProposalModules: <TData = ArrayOfProposalModule,>({
    client,
    args,
    options
  }: DaoCoreActiveProposalModulesQuery<TData>): UseQueryOptions<ArrayOfProposalModule, Error, TData> => ({
    queryKey: daoCoreQueryKeys.activeProposalModules(client?.contractAddress, args),
    queryFn: () => client ? client.activeProposalModules({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalModuleCount: <TData = ProposalModuleCountResponse,>({
    client,
    options
  }: DaoCoreProposalModuleCountQuery<TData>): UseQueryOptions<ProposalModuleCountResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.proposalModuleCount(client?.contractAddress),
    queryFn: () => client ? client.proposalModuleCount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  pauseInfo: <TData = PauseInfoResponse,>({
    client,
    options
  }: DaoCorePauseInfoQuery<TData>): UseQueryOptions<PauseInfoResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.pauseInfo(client?.contractAddress),
    queryFn: () => client ? client.pauseInfo() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingModule: <TData = Addr,>({
    client,
    options
  }: DaoCoreVotingModuleQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoCoreQueryKeys.votingModule(client?.contractAddress),
    queryFn: () => client ? client.votingModule() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listSubDaos: <TData = ArrayOfSubDao,>({
    client,
    args,
    options
  }: DaoCoreListSubDaosQuery<TData>): UseQueryOptions<ArrayOfSubDao, Error, TData> => ({
    queryKey: daoCoreQueryKeys.listSubDaos(client?.contractAddress, args),
    queryFn: () => client ? client.listSubDaos({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  daoURI: <TData = DaoURIResponse,>({
    client,
    options
  }: DaoCoreDaoURIQuery<TData>): UseQueryOptions<DaoURIResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.daoURI(client?.contractAddress),
    queryFn: () => client ? client.daoURI() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  votingPowerAtHeight: <TData = VotingPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoCoreVotingPowerAtHeightQuery<TData>): UseQueryOptions<VotingPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.votingPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.votingPowerAtHeight({
      address: args.address,
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  totalPowerAtHeight: <TData = TotalPowerAtHeightResponse,>({
    client,
    args,
    options
  }: DaoCoreTotalPowerAtHeightQuery<TData>): UseQueryOptions<TotalPowerAtHeightResponse, Error, TData> => ({
    queryKey: daoCoreQueryKeys.totalPowerAtHeight(client?.contractAddress, args),
    queryFn: () => client ? client.totalPowerAtHeight({
      height: args.height
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoCoreReactQuery<TResponse, TData = TResponse> {
  client: DaoCoreQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoCoreTotalPowerAtHeightQuery<TData> extends DaoCoreReactQuery<TotalPowerAtHeightResponse, TData> {
  args: {
    height?: number;
  };
}
export function useDaoCoreTotalPowerAtHeightQuery<TData = TotalPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoCoreTotalPowerAtHeightQuery<TData>) {
  return useQuery<TotalPowerAtHeightResponse, Error, TData>(daoCoreQueryKeys.totalPowerAtHeight(client?.contractAddress, args), () => client ? client.totalPowerAtHeight({
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreVotingPowerAtHeightQuery<TData> extends DaoCoreReactQuery<VotingPowerAtHeightResponse, TData> {
  args: {
    address: string;
    height?: number;
  };
}
export function useDaoCoreVotingPowerAtHeightQuery<TData = VotingPowerAtHeightResponse>({
  client,
  args,
  options
}: DaoCoreVotingPowerAtHeightQuery<TData>) {
  return useQuery<VotingPowerAtHeightResponse, Error, TData>(daoCoreQueryKeys.votingPowerAtHeight(client?.contractAddress, args), () => client ? client.votingPowerAtHeight({
    address: args.address,
    height: args.height
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreDaoURIQuery<TData> extends DaoCoreReactQuery<DaoURIResponse, TData> {}
export function useDaoCoreDaoURIQuery<TData = DaoURIResponse>({
  client,
  options
}: DaoCoreDaoURIQuery<TData>) {
  return useQuery<DaoURIResponse, Error, TData>(daoCoreQueryKeys.daoURI(client?.contractAddress), () => client ? client.daoURI() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreListSubDaosQuery<TData> extends DaoCoreReactQuery<ArrayOfSubDao, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreListSubDaosQuery<TData = ArrayOfSubDao>({
  client,
  args,
  options
}: DaoCoreListSubDaosQuery<TData>) {
  return useQuery<ArrayOfSubDao, Error, TData>(daoCoreQueryKeys.listSubDaos(client?.contractAddress, args), () => client ? client.listSubDaos({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreVotingModuleQuery<TData> extends DaoCoreReactQuery<Addr, TData> {}
export function useDaoCoreVotingModuleQuery<TData = Addr>({
  client,
  options
}: DaoCoreVotingModuleQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoCoreQueryKeys.votingModule(client?.contractAddress), () => client ? client.votingModule() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCorePauseInfoQuery<TData> extends DaoCoreReactQuery<PauseInfoResponse, TData> {}
export function useDaoCorePauseInfoQuery<TData = PauseInfoResponse>({
  client,
  options
}: DaoCorePauseInfoQuery<TData>) {
  return useQuery<PauseInfoResponse, Error, TData>(daoCoreQueryKeys.pauseInfo(client?.contractAddress), () => client ? client.pauseInfo() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreProposalModuleCountQuery<TData> extends DaoCoreReactQuery<ProposalModuleCountResponse, TData> {}
export function useDaoCoreProposalModuleCountQuery<TData = ProposalModuleCountResponse>({
  client,
  options
}: DaoCoreProposalModuleCountQuery<TData>) {
  return useQuery<ProposalModuleCountResponse, Error, TData>(daoCoreQueryKeys.proposalModuleCount(client?.contractAddress), () => client ? client.proposalModuleCount() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreActiveProposalModulesQuery<TData> extends DaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreActiveProposalModulesQuery<TData = ArrayOfProposalModule>({
  client,
  args,
  options
}: DaoCoreActiveProposalModulesQuery<TData>) {
  return useQuery<ArrayOfProposalModule, Error, TData>(daoCoreQueryKeys.activeProposalModules(client?.contractAddress, args), () => client ? client.activeProposalModules({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreProposalModulesQuery<TData> extends DaoCoreReactQuery<ArrayOfProposalModule, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreProposalModulesQuery<TData = ArrayOfProposalModule>({
  client,
  args,
  options
}: DaoCoreProposalModulesQuery<TData>) {
  return useQuery<ArrayOfProposalModule, Error, TData>(daoCoreQueryKeys.proposalModules(client?.contractAddress, args), () => client ? client.proposalModules({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreInfoQuery<TData> extends DaoCoreReactQuery<InfoResponse, TData> {}
export function useDaoCoreInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoCoreInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoCoreQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreListItemsQuery<TData> extends DaoCoreReactQuery<ArrayOfString, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreListItemsQuery<TData = ArrayOfString>({
  client,
  args,
  options
}: DaoCoreListItemsQuery<TData>) {
  return useQuery<ArrayOfString, Error, TData>(daoCoreQueryKeys.listItems(client?.contractAddress, args), () => client ? client.listItems({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreGetItemQuery<TData> extends DaoCoreReactQuery<GetItemResponse, TData> {
  args: {
    key: string;
  };
}
export function useDaoCoreGetItemQuery<TData = GetItemResponse>({
  client,
  args,
  options
}: DaoCoreGetItemQuery<TData>) {
  return useQuery<GetItemResponse, Error, TData>(daoCoreQueryKeys.getItem(client?.contractAddress, args), () => client ? client.getItem({
    key: args.key
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreDumpStateQuery<TData> extends DaoCoreReactQuery<DumpStateResponse, TData> {}
export function useDaoCoreDumpStateQuery<TData = DumpStateResponse>({
  client,
  options
}: DaoCoreDumpStateQuery<TData>) {
  return useQuery<DumpStateResponse, Error, TData>(daoCoreQueryKeys.dumpState(client?.contractAddress), () => client ? client.dumpState() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreCw721TokenListQuery<TData> extends DaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreCw721TokenListQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: DaoCoreCw721TokenListQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(daoCoreQueryKeys.cw721TokenList(client?.contractAddress, args), () => client ? client.cw721TokenList({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreCw20TokenListQuery<TData> extends DaoCoreReactQuery<ArrayOfAddr, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreCw20TokenListQuery<TData = ArrayOfAddr>({
  client,
  args,
  options
}: DaoCoreCw20TokenListQuery<TData>) {
  return useQuery<ArrayOfAddr, Error, TData>(daoCoreQueryKeys.cw20TokenList(client?.contractAddress, args), () => client ? client.cw20TokenList({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreCw20BalancesQuery<TData> extends DaoCoreReactQuery<Cw20BalanceResponse, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useDaoCoreCw20BalancesQuery<TData = Cw20BalanceResponse>({
  client,
  args,
  options
}: DaoCoreCw20BalancesQuery<TData>) {
  return useQuery<Cw20BalanceResponse, Error, TData>(daoCoreQueryKeys.cw20Balances(client?.contractAddress, args), () => client ? client.cw20Balances({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreConfigQuery<TData> extends DaoCoreReactQuery<Config, TData> {}
export function useDaoCoreConfigQuery<TData = Config>({
  client,
  options
}: DaoCoreConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoCoreQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreAdminNominationQuery<TData> extends DaoCoreReactQuery<AdminNominationResponse, TData> {}
export function useDaoCoreAdminNominationQuery<TData = AdminNominationResponse>({
  client,
  options
}: DaoCoreAdminNominationQuery<TData>) {
  return useQuery<AdminNominationResponse, Error, TData>(daoCoreQueryKeys.adminNomination(client?.contractAddress), () => client ? client.adminNomination() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreAdminQuery<TData> extends DaoCoreReactQuery<Addr, TData> {}
export function useDaoCoreAdminQuery<TData = Addr>({
  client,
  options
}: DaoCoreAdminQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoCoreQueryKeys.admin(client?.contractAddress), () => client ? client.admin() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoCoreUpdateSubDaosMutation {
  client: DaoCoreClient;
  msg: {
    toAdd: SubDao[];
    toRemove: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateSubDaosMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateSubDaosMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateSubDaosMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateSubDaos(msg, fee, memo, funds), options);
}
export interface DaoCoreUpdateVotingModuleMutation {
  client: DaoCoreClient;
  msg: {
    module: ModuleInstantiateInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateVotingModuleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateVotingModuleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateVotingModuleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateVotingModule(msg, fee, memo, funds), options);
}
export interface DaoCoreUpdateProposalModulesMutation {
  client: DaoCoreClient;
  msg: {
    toAdd: ModuleInstantiateInfo[];
    toDisable: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateProposalModulesMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateProposalModulesMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateProposalModulesMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateProposalModules(msg, fee, memo, funds), options);
}
export interface DaoCoreUpdateCw721ListMutation {
  client: DaoCoreClient;
  msg: {
    toAdd: string[];
    toRemove: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateCw721ListMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateCw721ListMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateCw721ListMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCw721List(msg, fee, memo, funds), options);
}
export interface DaoCoreUpdateCw20ListMutation {
  client: DaoCoreClient;
  msg: {
    toAdd: string[];
    toRemove: string[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateCw20ListMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateCw20ListMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateCw20ListMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCw20List(msg, fee, memo, funds), options);
}
export interface DaoCoreUpdateConfigMutation {
  client: DaoCoreClient;
  msg: {
    config: Config;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoCoreWithdrawAdminNominationMutation {
  client: DaoCoreClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreWithdrawAdminNominationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreWithdrawAdminNominationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreWithdrawAdminNominationMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.withdrawAdminNomination(fee, memo, funds), options);
}
export interface DaoCoreAcceptAdminNominationMutation {
  client: DaoCoreClient;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreAcceptAdminNominationMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreAcceptAdminNominationMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreAcceptAdminNominationMutation>(({
    client,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.acceptAdminNomination(fee, memo, funds), options);
}
export interface DaoCoreNominateAdminMutation {
  client: DaoCoreClient;
  msg: {
    admin?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreNominateAdminMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreNominateAdminMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreNominateAdminMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.nominateAdmin(msg, fee, memo, funds), options);
}
export interface DaoCoreSetItemMutation {
  client: DaoCoreClient;
  msg: {
    key: string;
    value: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreSetItemMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreSetItemMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreSetItemMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.setItem(msg, fee, memo, funds), options);
}
export interface DaoCoreRemoveItemMutation {
  client: DaoCoreClient;
  msg: {
    key: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreRemoveItemMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreRemoveItemMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreRemoveItemMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeItem(msg, fee, memo, funds), options);
}
export interface DaoCoreReceiveNftMutation {
  client: DaoCoreClient;
  msg: {
    msg: Binary;
    sender: string;
    tokenId: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreReceiveNftMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreReceiveNftMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreReceiveNftMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receiveNft(msg, fee, memo, funds), options);
}
export interface DaoCoreReceiveMutation {
  client: DaoCoreClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}
export interface DaoCorePauseMutation {
  client: DaoCoreClient;
  msg: {
    duration: Duration;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCorePauseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCorePauseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCorePauseMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.pause(msg, fee, memo, funds), options);
}
export interface DaoCoreExecuteProposalHookMutation {
  client: DaoCoreClient;
  msg: {
    msgs: CosmosMsgForEmpty[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreExecuteProposalHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreExecuteProposalHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreExecuteProposalHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeProposalHook(msg, fee, memo, funds), options);
}
export interface DaoCoreExecuteAdminMsgsMutation {
  client: DaoCoreClient;
  msg: {
    msgs: CosmosMsgForEmpty[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoCoreExecuteAdminMsgsMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoCoreExecuteAdminMsgsMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoCoreExecuteAdminMsgsMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.executeAdminMsgs(msg, fee, memo, funds), options);
}