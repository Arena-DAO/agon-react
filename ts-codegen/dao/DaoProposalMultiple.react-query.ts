/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Duration, PreProposeInfo, Admin, Binary, VotingStrategy, PercentageThreshold, Decimal, InstantiateMsg, ModuleInstantiateInfo, ExecuteMsg, CosmosMsgForEmpty, BankMsg, Uint128, StakingMsg, DistributionMsg, IbcMsg, Timestamp, Uint64, WasmMsg, GovMsg, VoteOption, MultipleChoiceOptions, MultipleChoiceOption, Coin, Empty, IbcTimeout, IbcTimeoutBlock, MultipleChoiceVote, QueryMsg, MigrateMsg, Addr, Config, VoteResponse, VoteInfo, InfoResponse, ContractVersion, MultipleChoiceOptionType, Expiration, Status, ProposalListResponse, ProposalResponse, MultipleChoiceProposal, CheckedMultipleChoiceOption, MultipleChoiceVotes, VoteListResponse, ProposalCreationPolicy, HooksResponse } from "./DaoProposalMultiple.types";
import { DaoProposalMultipleQueryClient, DaoProposalMultipleClient } from "./DaoProposalMultiple.client";
export const daoProposalMultipleQueryKeys = {
  contract: ([{
    contract: "daoProposalMultiple"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...daoProposalMultipleQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  config: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "config",
    args
  }] as const),
  proposal: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "proposal",
    args
  }] as const),
  listProposals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "list_proposals",
    args
  }] as const),
  reverseProposals: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "reverse_proposals",
    args
  }] as const),
  getVote: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "get_vote",
    args
  }] as const),
  listVotes: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "list_votes",
    args
  }] as const),
  proposalCount: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "proposal_count",
    args
  }] as const),
  proposalCreationPolicy: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "proposal_creation_policy",
    args
  }] as const),
  proposalHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "proposal_hooks",
    args
  }] as const),
  voteHooks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "vote_hooks",
    args
  }] as const),
  dao: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "dao",
    args
  }] as const),
  info: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "info",
    args
  }] as const),
  nextProposalId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...daoProposalMultipleQueryKeys.address(contractAddress)[0],
    method: "next_proposal_id",
    args
  }] as const)
};
export const daoProposalMultipleQueries = {
  config: <TData = Config,>({
    client,
    options
  }: DaoProposalMultipleConfigQuery<TData>): UseQueryOptions<Config, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.config(client?.contractAddress),
    queryFn: () => client ? client.config() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposal: <TData = ProposalResponse,>({
    client,
    args,
    options
  }: DaoProposalMultipleProposalQuery<TData>): UseQueryOptions<ProposalResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposal(client?.contractAddress, args),
    queryFn: () => client ? client.proposal({
      proposalId: args.proposalId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listProposals: <TData = ProposalListResponse,>({
    client,
    args,
    options
  }: DaoProposalMultipleListProposalsQuery<TData>): UseQueryOptions<ProposalListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.listProposals(client?.contractAddress, args),
    queryFn: () => client ? client.listProposals({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  reverseProposals: <TData = ProposalListResponse,>({
    client,
    args,
    options
  }: DaoProposalMultipleReverseProposalsQuery<TData>): UseQueryOptions<ProposalListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.reverseProposals(client?.contractAddress, args),
    queryFn: () => client ? client.reverseProposals({
      limit: args.limit,
      startBefore: args.startBefore
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getVote: <TData = VoteResponse,>({
    client,
    args,
    options
  }: DaoProposalMultipleGetVoteQuery<TData>): UseQueryOptions<VoteResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.getVote(client?.contractAddress, args),
    queryFn: () => client ? client.getVote({
      proposalId: args.proposalId,
      voter: args.voter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVotes: <TData = VoteListResponse,>({
    client,
    args,
    options
  }: DaoProposalMultipleListVotesQuery<TData>): UseQueryOptions<VoteListResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.listVotes(client?.contractAddress, args),
    queryFn: () => client ? client.listVotes({
      limit: args.limit,
      proposalId: args.proposalId,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalCount: <TData = Uint64,>({
    client,
    options
  }: DaoProposalMultipleProposalCountQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposalCount(client?.contractAddress),
    queryFn: () => client ? client.proposalCount() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalCreationPolicy: <TData = ProposalCreationPolicy,>({
    client,
    options
  }: DaoProposalMultipleProposalCreationPolicyQuery<TData>): UseQueryOptions<ProposalCreationPolicy, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposalCreationPolicy(client?.contractAddress),
    queryFn: () => client ? client.proposalCreationPolicy() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  proposalHooks: <TData = HooksResponse,>({
    client,
    options
  }: DaoProposalMultipleProposalHooksQuery<TData>): UseQueryOptions<HooksResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.proposalHooks(client?.contractAddress),
    queryFn: () => client ? client.proposalHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  voteHooks: <TData = HooksResponse,>({
    client,
    options
  }: DaoProposalMultipleVoteHooksQuery<TData>): UseQueryOptions<HooksResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.voteHooks(client?.contractAddress),
    queryFn: () => client ? client.voteHooks() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  dao: <TData = Addr,>({
    client,
    options
  }: DaoProposalMultipleDaoQuery<TData>): UseQueryOptions<Addr, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.dao(client?.contractAddress),
    queryFn: () => client ? client.dao() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  info: <TData = InfoResponse,>({
    client,
    options
  }: DaoProposalMultipleInfoQuery<TData>): UseQueryOptions<InfoResponse, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.info(client?.contractAddress),
    queryFn: () => client ? client.info() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  nextProposalId: <TData = Uint64,>({
    client,
    options
  }: DaoProposalMultipleNextProposalIdQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: daoProposalMultipleQueryKeys.nextProposalId(client?.contractAddress),
    queryFn: () => client ? client.nextProposalId() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface DaoProposalMultipleReactQuery<TResponse, TData = TResponse> {
  client: DaoProposalMultipleQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface DaoProposalMultipleNextProposalIdQuery<TData> extends DaoProposalMultipleReactQuery<Uint64, TData> {}
export function useDaoProposalMultipleNextProposalIdQuery<TData = Uint64>({
  client,
  options
}: DaoProposalMultipleNextProposalIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(daoProposalMultipleQueryKeys.nextProposalId(client?.contractAddress), () => client ? client.nextProposalId() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleInfoQuery<TData> extends DaoProposalMultipleReactQuery<InfoResponse, TData> {}
export function useDaoProposalMultipleInfoQuery<TData = InfoResponse>({
  client,
  options
}: DaoProposalMultipleInfoQuery<TData>) {
  return useQuery<InfoResponse, Error, TData>(daoProposalMultipleQueryKeys.info(client?.contractAddress), () => client ? client.info() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleDaoQuery<TData> extends DaoProposalMultipleReactQuery<Addr, TData> {}
export function useDaoProposalMultipleDaoQuery<TData = Addr>({
  client,
  options
}: DaoProposalMultipleDaoQuery<TData>) {
  return useQuery<Addr, Error, TData>(daoProposalMultipleQueryKeys.dao(client?.contractAddress), () => client ? client.dao() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleVoteHooksQuery<TData> extends DaoProposalMultipleReactQuery<HooksResponse, TData> {}
export function useDaoProposalMultipleVoteHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoProposalMultipleVoteHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(daoProposalMultipleQueryKeys.voteHooks(client?.contractAddress), () => client ? client.voteHooks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleProposalHooksQuery<TData> extends DaoProposalMultipleReactQuery<HooksResponse, TData> {}
export function useDaoProposalMultipleProposalHooksQuery<TData = HooksResponse>({
  client,
  options
}: DaoProposalMultipleProposalHooksQuery<TData>) {
  return useQuery<HooksResponse, Error, TData>(daoProposalMultipleQueryKeys.proposalHooks(client?.contractAddress), () => client ? client.proposalHooks() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleProposalCreationPolicyQuery<TData> extends DaoProposalMultipleReactQuery<ProposalCreationPolicy, TData> {}
export function useDaoProposalMultipleProposalCreationPolicyQuery<TData = ProposalCreationPolicy>({
  client,
  options
}: DaoProposalMultipleProposalCreationPolicyQuery<TData>) {
  return useQuery<ProposalCreationPolicy, Error, TData>(daoProposalMultipleQueryKeys.proposalCreationPolicy(client?.contractAddress), () => client ? client.proposalCreationPolicy() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleProposalCountQuery<TData> extends DaoProposalMultipleReactQuery<Uint64, TData> {}
export function useDaoProposalMultipleProposalCountQuery<TData = Uint64>({
  client,
  options
}: DaoProposalMultipleProposalCountQuery<TData>) {
  return useQuery<Uint64, Error, TData>(daoProposalMultipleQueryKeys.proposalCount(client?.contractAddress), () => client ? client.proposalCount() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleListVotesQuery<TData> extends DaoProposalMultipleReactQuery<VoteListResponse, TData> {
  args: {
    limit?: number;
    proposalId: number;
    startAfter?: string;
  };
}
export function useDaoProposalMultipleListVotesQuery<TData = VoteListResponse>({
  client,
  args,
  options
}: DaoProposalMultipleListVotesQuery<TData>) {
  return useQuery<VoteListResponse, Error, TData>(daoProposalMultipleQueryKeys.listVotes(client?.contractAddress, args), () => client ? client.listVotes({
    limit: args.limit,
    proposalId: args.proposalId,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleGetVoteQuery<TData> extends DaoProposalMultipleReactQuery<VoteResponse, TData> {
  args: {
    proposalId: number;
    voter: string;
  };
}
export function useDaoProposalMultipleGetVoteQuery<TData = VoteResponse>({
  client,
  args,
  options
}: DaoProposalMultipleGetVoteQuery<TData>) {
  return useQuery<VoteResponse, Error, TData>(daoProposalMultipleQueryKeys.getVote(client?.contractAddress, args), () => client ? client.getVote({
    proposalId: args.proposalId,
    voter: args.voter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleReverseProposalsQuery<TData> extends DaoProposalMultipleReactQuery<ProposalListResponse, TData> {
  args: {
    limit?: number;
    startBefore?: number;
  };
}
export function useDaoProposalMultipleReverseProposalsQuery<TData = ProposalListResponse>({
  client,
  args,
  options
}: DaoProposalMultipleReverseProposalsQuery<TData>) {
  return useQuery<ProposalListResponse, Error, TData>(daoProposalMultipleQueryKeys.reverseProposals(client?.contractAddress, args), () => client ? client.reverseProposals({
    limit: args.limit,
    startBefore: args.startBefore
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleListProposalsQuery<TData> extends DaoProposalMultipleReactQuery<ProposalListResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useDaoProposalMultipleListProposalsQuery<TData = ProposalListResponse>({
  client,
  args,
  options
}: DaoProposalMultipleListProposalsQuery<TData>) {
  return useQuery<ProposalListResponse, Error, TData>(daoProposalMultipleQueryKeys.listProposals(client?.contractAddress, args), () => client ? client.listProposals({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleProposalQuery<TData> extends DaoProposalMultipleReactQuery<ProposalResponse, TData> {
  args: {
    proposalId: number;
  };
}
export function useDaoProposalMultipleProposalQuery<TData = ProposalResponse>({
  client,
  args,
  options
}: DaoProposalMultipleProposalQuery<TData>) {
  return useQuery<ProposalResponse, Error, TData>(daoProposalMultipleQueryKeys.proposal(client?.contractAddress, args), () => client ? client.proposal({
    proposalId: args.proposalId
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleConfigQuery<TData> extends DaoProposalMultipleReactQuery<Config, TData> {}
export function useDaoProposalMultipleConfigQuery<TData = Config>({
  client,
  options
}: DaoProposalMultipleConfigQuery<TData>) {
  return useQuery<Config, Error, TData>(daoProposalMultipleQueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface DaoProposalMultipleRemoveVoteHookMutation {
  client: DaoProposalMultipleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleRemoveVoteHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleRemoveVoteHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleRemoveVoteHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeVoteHook(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleAddVoteHookMutation {
  client: DaoProposalMultipleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleAddVoteHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleAddVoteHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleAddVoteHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addVoteHook(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleRemoveProposalHookMutation {
  client: DaoProposalMultipleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleRemoveProposalHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleRemoveProposalHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleRemoveProposalHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeProposalHook(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleAddProposalHookMutation {
  client: DaoProposalMultipleClient;
  msg: {
    address: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleAddProposalHookMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleAddProposalHookMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleAddProposalHookMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.addProposalHook(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleUpdatePreProposeInfoMutation {
  client: DaoProposalMultipleClient;
  msg: {
    info: PreProposeInfo;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleUpdatePreProposeInfoMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleUpdatePreProposeInfoMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleUpdatePreProposeInfoMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updatePreProposeInfo(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleUpdateRationaleMutation {
  client: DaoProposalMultipleClient;
  msg: {
    proposalId: number;
    rationale?: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleUpdateRationaleMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleUpdateRationaleMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleUpdateRationaleMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateRationale(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleUpdateConfigMutation {
  client: DaoProposalMultipleClient;
  msg: {
    allowRevoting: boolean;
    closeProposalOnExecutionFailure: boolean;
    dao: string;
    maxVotingPeriod: Duration;
    minVotingPeriod?: Duration;
    onlyMembersExecute: boolean;
    votingStrategy: VotingStrategy;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleUpdateConfigMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleUpdateConfigMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleUpdateConfigMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateConfig(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleCloseMutation {
  client: DaoProposalMultipleClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleCloseMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleCloseMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleCloseMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.close(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleExecuteMutation {
  client: DaoProposalMultipleClient;
  msg: {
    proposalId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleExecuteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleExecuteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleExecuteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.execute(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleVoteMutation {
  client: DaoProposalMultipleClient;
  msg: {
    proposalId: number;
    rationale?: string;
    vote: MultipleChoiceVote;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleVoteMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleVoteMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleVoteMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.vote(msg, fee, memo, funds), options);
}
export interface DaoProposalMultipleProposeMutation {
  client: DaoProposalMultipleClient;
  msg: {
    choices: MultipleChoiceOptions;
    description: string;
    proposer?: string;
    title: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useDaoProposalMultipleProposeMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, DaoProposalMultipleProposeMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, DaoProposalMultipleProposeMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.propose(msg, fee, memo, funds), options);
}