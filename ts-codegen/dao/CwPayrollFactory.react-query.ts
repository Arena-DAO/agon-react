/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.27.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, Uint128, Binary, UncheckedDenom, Schedule, Timestamp, Uint64, Action, Expiration, Cw20ReceiveMsg, QueryMsg, ArrayOfVestingContract, VestingContract, Addr, OwnershipForAddr } from "./CwPayrollFactory.types";
import { CwPayrollFactoryQueryClient, CwPayrollFactoryClient } from "./CwPayrollFactory.client";
export const cwPayrollFactoryQueryKeys = {
  contract: ([{
    contract: "cwPayrollFactory"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...cwPayrollFactoryQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  listVestingContracts: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts",
    args
  }] as const),
  listVestingContractsReverse: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts_reverse",
    args
  }] as const),
  listVestingContractsByInstantiator: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts_by_instantiator",
    args
  }] as const),
  listVestingContractsByInstantiatorReverse: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts_by_instantiator_reverse",
    args
  }] as const),
  listVestingContractsByRecipient: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts_by_recipient",
    args
  }] as const),
  listVestingContractsByRecipientReverse: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "list_vesting_contracts_by_recipient_reverse",
    args
  }] as const),
  ownership: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "ownership",
    args
  }] as const),
  codeId: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...cwPayrollFactoryQueryKeys.address(contractAddress)[0],
    method: "code_id",
    args
  }] as const)
};
export const cwPayrollFactoryQueries = {
  listVestingContracts: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContracts(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContracts({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVestingContractsReverse: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsReverseQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContractsReverse(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContractsReverse({
      limit: args.limit,
      startBefore: args.startBefore
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVestingContractsByInstantiator: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsByInstantiatorQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContractsByInstantiator(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContractsByInstantiator({
      instantiator: args.instantiator,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVestingContractsByInstantiatorReverse: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsByInstantiatorReverseQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContractsByInstantiatorReverse(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContractsByInstantiatorReverse({
      instantiator: args.instantiator,
      limit: args.limit,
      startBefore: args.startBefore
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVestingContractsByRecipient: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsByRecipientQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContractsByRecipient(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContractsByRecipient({
      limit: args.limit,
      recipient: args.recipient,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  listVestingContractsByRecipientReverse: <TData = ArrayOfVestingContract,>({
    client,
    args,
    options
  }: CwPayrollFactoryListVestingContractsByRecipientReverseQuery<TData>): UseQueryOptions<ArrayOfVestingContract, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.listVestingContractsByRecipientReverse(client?.contractAddress, args),
    queryFn: () => client ? client.listVestingContractsByRecipientReverse({
      limit: args.limit,
      recipient: args.recipient,
      startBefore: args.startBefore
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  ownership: <TData = OwnershipForAddr,>({
    client,
    options
  }: CwPayrollFactoryOwnershipQuery<TData>): UseQueryOptions<OwnershipForAddr, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.ownership(client?.contractAddress),
    queryFn: () => client ? client.ownership() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  codeId: <TData = Uint64,>({
    client,
    options
  }: CwPayrollFactoryCodeIdQuery<TData>): UseQueryOptions<Uint64, Error, TData> => ({
    queryKey: cwPayrollFactoryQueryKeys.codeId(client?.contractAddress),
    queryFn: () => client ? client.codeId() : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface CwPayrollFactoryReactQuery<TResponse, TData = TResponse> {
  client: CwPayrollFactoryQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface CwPayrollFactoryCodeIdQuery<TData> extends CwPayrollFactoryReactQuery<Uint64, TData> {}
export function useCwPayrollFactoryCodeIdQuery<TData = Uint64>({
  client,
  options
}: CwPayrollFactoryCodeIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(cwPayrollFactoryQueryKeys.codeId(client?.contractAddress), () => client ? client.codeId() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryOwnershipQuery<TData> extends CwPayrollFactoryReactQuery<OwnershipForAddr, TData> {}
export function useCwPayrollFactoryOwnershipQuery<TData = OwnershipForAddr>({
  client,
  options
}: CwPayrollFactoryOwnershipQuery<TData>) {
  return useQuery<OwnershipForAddr, Error, TData>(cwPayrollFactoryQueryKeys.ownership(client?.contractAddress), () => client ? client.ownership() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsByRecipientReverseQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    limit?: number;
    recipient: string;
    startBefore?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsByRecipientReverseQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsByRecipientReverseQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContractsByRecipientReverse(client?.contractAddress, args), () => client ? client.listVestingContractsByRecipientReverse({
    limit: args.limit,
    recipient: args.recipient,
    startBefore: args.startBefore
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsByRecipientQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    limit?: number;
    recipient: string;
    startAfter?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsByRecipientQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsByRecipientQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContractsByRecipient(client?.contractAddress, args), () => client ? client.listVestingContractsByRecipient({
    limit: args.limit,
    recipient: args.recipient,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsByInstantiatorReverseQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startBefore?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsByInstantiatorReverseQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsByInstantiatorReverseQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContractsByInstantiatorReverse(client?.contractAddress, args), () => client ? client.listVestingContractsByInstantiatorReverse({
    instantiator: args.instantiator,
    limit: args.limit,
    startBefore: args.startBefore
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsByInstantiatorQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    instantiator: string;
    limit?: number;
    startAfter?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsByInstantiatorQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsByInstantiatorQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContractsByInstantiator(client?.contractAddress, args), () => client ? client.listVestingContractsByInstantiator({
    instantiator: args.instantiator,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsReverseQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    limit?: number;
    startBefore?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsReverseQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsReverseQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContractsReverse(client?.contractAddress, args), () => client ? client.listVestingContractsReverse({
    limit: args.limit,
    startBefore: args.startBefore
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryListVestingContractsQuery<TData> extends CwPayrollFactoryReactQuery<ArrayOfVestingContract, TData> {
  args: {
    limit?: number;
    startAfter?: string;
  };
}
export function useCwPayrollFactoryListVestingContractsQuery<TData = ArrayOfVestingContract>({
  client,
  args,
  options
}: CwPayrollFactoryListVestingContractsQuery<TData>) {
  return useQuery<ArrayOfVestingContract, Error, TData>(cwPayrollFactoryQueryKeys.listVestingContracts(client?.contractAddress, args), () => client ? client.listVestingContracts({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface CwPayrollFactoryUpdateOwnershipMutation {
  client: CwPayrollFactoryClient;
  msg: Action;
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPayrollFactoryUpdateOwnershipMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPayrollFactoryUpdateOwnershipMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPayrollFactoryUpdateOwnershipMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateOwnership(msg, fee, memo, funds), options);
}
export interface CwPayrollFactoryUpdateCodeIdMutation {
  client: CwPayrollFactoryClient;
  msg: {
    vestingCodeId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPayrollFactoryUpdateCodeIdMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPayrollFactoryUpdateCodeIdMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPayrollFactoryUpdateCodeIdMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateCodeId(msg, fee, memo, funds), options);
}
export interface CwPayrollFactoryInstantiateNativePayrollContractMutation {
  client: CwPayrollFactoryClient;
  msg: {
    instantiateMsg: InstantiateMsg;
    label: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPayrollFactoryInstantiateNativePayrollContractMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPayrollFactoryInstantiateNativePayrollContractMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPayrollFactoryInstantiateNativePayrollContractMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.instantiateNativePayrollContract(msg, fee, memo, funds), options);
}
export interface CwPayrollFactoryReceiveMutation {
  client: CwPayrollFactoryClient;
  msg: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useCwPayrollFactoryReceiveMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, CwPayrollFactoryReceiveMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, CwPayrollFactoryReceiveMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}